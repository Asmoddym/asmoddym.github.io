package net.noparking.projects.activity

import android.arch.lifecycle.LiveData
import android.arch.lifecycle.Observer
import android.content.Intent
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.support.v7.app.AlertDialog
import android.util.Log
import android.util.TypedValue
import android.widget.TextView

import kotlinx.android.synthetic.main.activity_projects_manager.*
import net.noparking.projects.R
import net.noparking.projects.adapter.TextViewAdapter
import net.noparking.projects.database.image.ImageAsyncDelete
import net.noparking.projects.database.project.Project
import net.noparking.projects.database.project.ProjectAsyncDelete
import net.noparking.projects.database.project.ProjectAsyncInsert
import net.noparking.projects.database.project.ProjectsCollector
import net.noparking.projects.utl.ProjectItemParametring
import net.noparking.projects.utl.ProjectNamePicker
import java.text.SimpleDateFormat
import java.util.*

class ProjectsManagerActivity : AppCompatActivity() {
	private lateinit var _projects_list: LiveData<List<Project>>

	override fun onCreate(savedInstanceState: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_projects_manager)

		_projects_list = ProjectsCollector().init(baseContext).getAll()

		initProjectNamePicker()
		initProjectsView()
	}


	private fun initProjectNamePicker() {
		val picker = ProjectNamePicker(this)

		projects_manager_new_project.setOnClickListener {
			picker.setDefaultInput("")
					.setOnPositiveAction { str, is_known ->
						if (is_known) {
							AlertDialog.Builder(this).setTitle(getString(R.string.this_project_name_is_already_taken)).setPositiveButton(getString(R.string.ok), { _, _ -> }).show()
						} else {
							createNewProject(str)
						}
					}
					.show()
		}
	}

	private fun initProjectsView() {
		val observer = Observer<List<Project>> {
			val array: ArrayList<TextView> = arrayListOf()
			it!!.forEach {
				val view = TextView(this)
				view.text = it.project_name
				view.minimumHeight = 20
				view.setTextSize(TypedValue.COMPLEX_UNIT_SP, 25f)

				val project = it
				view.setOnClickListener { goToProjectManager(project.id) }
				view.setOnLongClickListener { goToProjectParametring(project); true }

				array.add(view)
			}
			val adapter = TextViewAdapter(baseContext, array)
			projects_manager_projects_list.adapter = adapter
		}
		if (!_projects_list.hasActiveObservers()) {
			_projects_list.observe(this, observer)
		}
	}

	private fun goToProjectParametring(project: Project) {
		val param = ProjectItemParametring(this)
		param.setDefaultInput(project.project_name)
				.setComparisonMethod {
					var exists = false
					val str = it
					_projects_list.value!!.forEach {
						Log.e(it.project_name, it.directory)
						exists = when (exists) {
							false -> it.project_name == str
							else -> true
						}
					}
					exists
				}
				.setOnSaveAction { s, b ->
					project.project_name = s
					ProjectAsyncInsert().init(baseContext).execute(project)
				}
				.setOnDeleteAction { s, b ->
					deleteProject(project)
				}
				.show()
	}

	private fun deleteProject(project: Project) {
		ProjectAsyncDelete().init(baseContext).deleteById(project.id!!).execute()
	}

	private fun createNewProject(name: String) {
		val project = Project()
		project.directory = generateDirectoryFromProjectName(name)
		project.project_name = name
		ProjectAsyncInsert().init(baseContext).afterQuery { goToProjectManager(it) }.execute(project)
	}

	private fun goToProjectManager(project_id: Long?) {
		val intent = Intent(this, ProjectManagerActivity::class.java)
		intent.putExtra("project_id", project_id)
		startActivity(intent)
	}

	private fun generateDirectoryFromProjectName(raw: String): String {
		val result = raw.toLowerCase().replace(' ', '_')
		return result + "_" + SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())
	}

	override fun onDestroy() {
		super.onDestroy()
	}
}