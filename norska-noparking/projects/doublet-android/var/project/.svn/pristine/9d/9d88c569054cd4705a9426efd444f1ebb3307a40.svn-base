package net.noparking.projects.utl

import android.arch.lifecycle.LiveData
import android.support.v7.app.AlertDialog
import android.support.v7.app.AppCompatActivity
import android.text.Editable
import android.text.TextWatcher
import android.view.View
import android.view.ViewGroup
import kotlinx.android.synthetic.main.layout_project_item_parametring.view.*
import net.noparking.projects.R

class ProjectItemParametring(internal val activity: AppCompatActivity) {
	private val _view = activity.layoutInflater.inflate(R.layout.layout_project_item_parametring, null)
	private var _on_save: ((String, Boolean) -> Unit)? = null
	private var _on_delete: ((String, Boolean) -> Unit)? = null
	private var _comparison_method: ((String) -> Boolean)? = null

	init {
	}

	fun setDefaultInput(str: String): ProjectItemParametring {
		_view.layout_project_item_parametring_input.text.replace(0, _view.layout_project_item_parametring_input.text.length, str)
		return this
	}

	fun setOnSaveAction(f: (String, Boolean) -> Unit): ProjectItemParametring {
		_on_save = f
		return this
	}

	fun setOnDeleteAction(f: (String, Boolean) -> Unit): ProjectItemParametring {
		_on_delete = f
		return this
	}

	fun setComparisonMethod(f: (String) -> Boolean): ProjectItemParametring {
		_comparison_method = f
		return this
	}

	fun show() {
		val picker = AlertDialog.Builder(activity)
				.setView(_view)
				.setOnDismissListener {
					if (_view.parent != null) {
						(_view.parent as ViewGroup).removeView(_view)
					}
				}
				.create()

		if (_on_delete != null) {
			_view.layout_project_item_parametring_delete.setOnClickListener {
				picker.dismiss()
				AlertDialog.Builder(activity)
						.setTitle(activity.getString(R.string.confirm_the_deletion))
						.setPositiveButton(activity.getString(R.string.confirm), { _, _ ->
							_on_delete?.invoke(_view.layout_project_item_parametring_input.text.toString(), when (_comparison_method) {
								null -> false
								else -> _comparison_method!!.invoke(_view.layout_project_item_parametring_input.text.toString())
							})
						})
						.setNegativeButton(activity.getString(R.string.cancel), { _, _ -> })
						.show()
			}
		}

		if (_on_save != null) {
			_view.layout_project_item_parametring_save.setOnClickListener {
				picker.dismiss()
				_on_save?.invoke(_view.layout_project_item_parametring_input.text.toString(), when (_comparison_method) {
					null -> false
					else -> _comparison_method!!.invoke(_view.layout_project_item_parametring_input.text.toString())
				})
			}
		}

		_view.layout_project_item_parametring_input.addTextChangedListener(object : TextWatcher {
			override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
			override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
			override fun afterTextChanged(s: Editable?) {
				_view.layout_project_item_parametring_name_already_taken.visibility = when (_comparison_method) {
					null -> View.INVISIBLE
					else -> when (_comparison_method?.invoke(s.toString())) {
						true -> View.VISIBLE
						else -> View.INVISIBLE
					}
				}
			}
		})

		picker.show()
	}
}