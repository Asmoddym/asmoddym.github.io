package net.noparking.projects.view.ImageEditionView.canvas.modes.utl.polygon

import android.graphics.Color
import android.support.v7.app.AlertDialog
import android.support.v7.app.AppCompatActivity
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.View
import android.view.ViewGroup
import kotlinx.android.synthetic.main.layout_polygon_annotation.view.*
import net.noparking.projects.R
import net.noparking.projects.database.polygon_annotation.PolygonAnnotation

class PolygonAnnotationPicker(internal val activity: AppCompatActivity) {
	private lateinit var _view: View
	private var _data: PolygonAnnotation? = null
	private var _on_save: ((Long, Float, Float, Float, String) -> Unit)? = null
	private var _on_delete: ((Long) -> Unit)? = null

	private lateinit var _picker: AlertDialog

	private var _recalculating = false
	private var _id: Long = 0.toLong()

	fun setData(data: PolygonAnnotation): PolygonAnnotationPicker {
		_data = data
		_id = when (data.id) { null -> 0 else -> data.id!! }
		return this
	}

	fun setOnSaveAction(f: (id: Long, width: Float, height: Float, surface: Float, comment: String) -> Unit): PolygonAnnotationPicker {
		_on_save = f
		return this
	}

	fun setOnDeleteAction(f: (id: Long) -> Unit): PolygonAnnotationPicker {
		_on_delete = f
		return this
	}

	fun init(): PolygonAnnotationPicker {
		_view = activity.layoutInflater.inflate(R.layout.layout_polygon_annotation, null)
		_on_save = null
		_on_delete = null
		_data = null
		_id = 0
		_recalculating = false
		_view.layout_polygon_annotation_height.setTextColor(Color.BLACK)
		_view.layout_polygon_annotation_width.setTextColor(Color.BLACK)
		_view.layout_polygon_annotation_height.text.clear()
		_view.layout_polygon_annotation_width.text.clear()
		_view.layout_polygon_annotation_surface.text.clear()
		_view.layout_polygon_annotation_comment.text.clear()
		return this
	}

 	fun show() {
		updateView()
		_recalculating = false
		_picker = AlertDialog.Builder(activity)
				.setView(_view)
				.setOnDismissListener {
					if (_view.parent != null) {
						(_view.parent as ViewGroup).removeView(_view)
					}
				}
				.setTitle(activity.getString(R.string.handle_annotations))
				.create()
		_picker.show()
	}

	private fun updateView() {
		if (_data != null) {
			_view.layout_polygon_annotation_height.text
					.replace(0, _view.layout_polygon_annotation_height.text.length, _data?.height.toString())
			_view.layout_polygon_annotation_width.text
					.replace(0, _view.layout_polygon_annotation_width.text.length, _data?.width.toString())
			_view.layout_polygon_annotation_surface.text
					.replace(0, _view.layout_polygon_annotation_surface.text.length, (_data?.width!! * _data?.height!!).toString())
			_view.layout_polygon_annotation_comment.text
					.replace(0, _view.layout_polygon_annotation_comment.text.length, _data?.comment)
			_view.layout_polygon_annotation_surface.text
					.replace(0, _view.layout_polygon_annotation_surface.text.length, _data?.surface.toString())
		}

		_view.layout_polygon_annotation_width.addTextChangedListener(object : TextWatcher {
			override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
			override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
			override fun afterTextChanged(s: Editable?) {
				_view.layout_polygon_annotation_width.setTextColor(Color.BLACK)
				if (!s.isNullOrEmpty()) {
					recalculateSurface()
				}
			}
		})

		_view.layout_polygon_annotation_height.addTextChangedListener(object : TextWatcher {
			override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
			override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
			override fun afterTextChanged(s: Editable?) {
				_view.layout_polygon_annotation_height.setTextColor(Color.BLACK)
				if (!s.isNullOrEmpty()) {
					recalculateSurface()
				}
			}
		})

		_view.layout_polygon_annotation_surface.addTextChangedListener(object : TextWatcher {
			override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
			override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
			override fun afterTextChanged(s: Editable?) {
				if (!_recalculating) {
					_view.layout_polygon_annotation_height.setTextColor(Color.RED)
					_view.layout_polygon_annotation_width.setTextColor(Color.RED)
				}
			}
		})

		if (_on_delete != null) {
			_view.layout_polygon_annotation_delete.setOnClickListener {
				AlertDialog.Builder(activity)
						.setTitle(activity.getString(R.string.confirm_the_deletion))
						.setPositiveButton(activity.getString(R.string.confirm), { _, _ ->
							if (_on_delete != null) {
								_on_delete?.invoke(_id)
							}
						})
						.setNegativeButton(activity.getString(R.string.cancel), { _, _ -> })
						.show()
				_picker.dismiss()
			}
		}
		if (_on_save != null) {
			_view.layout_polygon_annotation_save.setOnClickListener {
				if (_on_save != null) {
					_on_save?.invoke(
							_id,
							_view.layout_polygon_annotation_width.text.toString().toFloat(),
							_view.layout_polygon_annotation_height.text.toString().toFloat(),
							_view.layout_polygon_annotation_surface.text.toString().toFloat(),
							_view.layout_polygon_annotation_comment.text.toString())
				}
				_picker.dismiss()
			}
		}
	}

	private fun recalculateSurface() {
		_recalculating = true
		val width = _view.layout_polygon_annotation_width.text.toString()
		val height = _view.layout_polygon_annotation_height.text.toString()

		if (width.isNotEmpty() && height.isNotEmpty()) {
			val surface = width.toFloat() * height.toFloat()
			_view.layout_polygon_annotation_surface.text.replace(0, _view.layout_polygon_annotation_surface.text.length, surface.toString())
		}
		_recalculating = false
	}
}