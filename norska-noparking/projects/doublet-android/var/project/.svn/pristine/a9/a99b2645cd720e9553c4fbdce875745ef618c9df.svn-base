package net.noparking.projects.activity

import android.arch.lifecycle.LiveData
import android.arch.lifecycle.Observer
import android.content.Intent
import android.net.Uri
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.support.v7.app.AlertDialog
import android.util.TypedValue
import android.view.*
import android.widget.TextView
import kotlinx.android.synthetic.main.activity_project_manager.*
import net.noparking.projects.R
import net.noparking.projects.adapter.TextViewAdapter
import net.noparking.projects.database.image.Image
import net.noparking.projects.database.image.ImageAsyncDelete
import net.noparking.projects.database.image.ImageAsyncInsert
import net.noparking.projects.database.image.ImagesCollector
import net.noparking.projects.database.project.Project
import net.noparking.projects.database.project.ProjectAsyncInsert
import net.noparking.projects.database.project.ProjectsCollector
import net.noparking.projects.utl.*
import java.io.File

class ProjectManagerActivity : AppCompatActivity() {
	private val _projects_collector = ProjectsCollector()
	private val _images_collector = ImagesCollector()

	private lateinit var _root_directory: Directory
	private lateinit var _project_directory: Directory
	private var _image_picker: ImagePicker? = null

	private var _project: Project? = null

	private lateinit var _images_list: LiveData<List<Image>>

	override fun onCreate(savedInstanceState: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_project_manager)
		retrieveProjectInfos()
	}

	private fun retrieveProjectInfos() {
		_projects_collector.init(baseContext)
		_projects_collector.getById(intent.getLongExtra("project_id", 0)).observe(this, Observer<Project> {
			if (it != null) {
				_project = it
				initDirectories(it.directory)
				retrieveProjectImages(it)
				initViewItems()
			}
		})
	}

	private fun retrieveProjectImages(project: Project) {
		_images_collector.init(baseContext)
		_images_list = _images_collector.getByProjectId(project.id!!)
		val observer = Observer<List<Image>> {
			if (it != null) {
				val array: ArrayList<TextView> = arrayListOf()
				it.forEach {
					val view = TextView(this)
					view.text = it.image_name
					view.minimumHeight = 20
					view.setTextSize(TypedValue.COMPLEX_UNIT_SP, 23f)

					val image = it
					view.setOnClickListener { goToImageEdition(image) }
					view.setOnLongClickListener { goToImageParametring(image);true }
					array.add(view)
				}
				val adapter = TextViewAdapter(baseContext, array)
				project_manager_images_list.adapter = adapter
			}
		}
		if (!_images_list.hasActiveObservers()) {
			_images_list.observe(this, observer)
		}
	}

	private fun initDirectories(directory_name: String) {
		_root_directory = Directory(baseContext.filesDir, getString(R.string.projects_directory))
		_root_directory.create()
		_project_directory = Directory(_root_directory.getPath(), directory_name)
		_project_directory.create()
	}

	private fun initViewItems() {
		_image_picker = ImagePicker(this, _project_directory)

		project_manager_new_image.setOnClickListener { _image_picker?.show() }
	}

	override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
		super.onActivityResult(requestCode, resultCode, data)
		val new_image = _image_picker!!.onActivityResult(requestCode, resultCode, data)
		saveImage(new_image)
	}

	private fun saveImage(image: net.noparking.projects.utl.Image) {
		val to_save = Image()

		to_save.file_name = image.file_name
		to_save.uri = image.uri.toString()
		to_save.project_id = _project?.id!!

		ImageNamePicker(this, to_save.project_id)
				.setDefaultInput(image.file_name)
				.setOnPositiveAction { s, b ->
					if (b) {
						AlertDialog.Builder(this).setTitle(getString(R.string.this_image_name_is_already_taken))
								.setPositiveButton(getString(R.string.ok), { _, _ -> }).show()
					} else {
						to_save.image_name = s
						ImageAsyncInsert()
								.init(baseContext)
								.afterQuery {
									to_save.id = it
									goToImageEdition(to_save)
								}
								.execute(to_save)
					}
				}
				.show()
	}

	override fun onResume() {
		super.onResume()
		_image_picker?.reset()
	}

	private fun goToImageEdition(image: Image) {
		val intent = Intent(this, ImageEditionActivity::class.java)
		intent.putExtra("image_id", image.id)
		intent.putExtra("image_uri", Uri.parse(image.uri))
		intent.putExtra("image_file", File(_project_directory.getPath(), image.file_name))
		startActivity(intent)
	}

	private fun changeProjectName() {
		val picker = ProjectNamePicker(this)
		picker.setDefaultInput(_project?.project_name!!)
				.setOnPositiveAction { str, is_known ->
					if (is_known) {
						AlertDialog.Builder(this)
								.setTitle(getString(R.string.this_project_name_is_already_taken))
								.setPositiveButton(getString(R.string.ok), { _, _ -> })
								.show()
					} else {
						_project?.project_name = str
						ProjectAsyncInsert().init(baseContext).execute(_project)
					}
				}
				.show()
	}

	private fun goToImageParametring(image: Image) {
		val param = ProjectItemParametring(this)
		param.setDefaultInput(image.image_name)
				.setComparisonMethod {
					var exists = false
					val str = it
					_images_list.value!!.forEach {
						exists = when (exists) {
							false -> it.image_name == str
							else -> true
						}
					}
					exists
				}
				.setOnSaveAction { s, b ->
					image.image_name = s
					ImageAsyncInsert().init(baseContext).execute(image)
				}
				.setOnDeleteAction { s, b ->
					deleteImage(image)
				}
				.show()
	}

	fun deleteImage(image: Image) {
		ImageAsyncDelete().init(baseContext).deleteById(image.id!!).execute()


	}

	override fun onOptionsItemSelected(item: MenuItem?): Boolean {
		super.onOptionsItemSelected(item)
		when (item?.itemId) {
			R.id.menu_project_manager_main_project_name -> {
				changeProjectName()
			}
			else -> {
			}
		}
		return true
	}

	override fun onCreateOptionsMenu(menu: Menu?): Boolean {
		super.onCreateOptionsMenu(menu)
		menuInflater.inflate(R.menu.menu_project_manager_main, menu)
		return true
	}
}
