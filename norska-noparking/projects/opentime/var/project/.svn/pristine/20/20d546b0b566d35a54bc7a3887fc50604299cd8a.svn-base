<?php
/*
	opentime
	$Author$
	$URL$
	$Revision$

	Copyright (C) No Parking 2009 - 2018
*/

class Invoice extends Record {
	public $id = 0;
	public $project_id = 0;
	public $user_id = 0;
	public $contact_id = 0;
	public $quote_id = null;
	public $number = "";
	public $title = "";
	public $description = "";
	public $vatrate = 0.0;
	public $invoicelink_id = 0;
	public $day = 0;
	public $time = 0;
	public $comment = "";

	private $invoiceoptions = array();

	function __construct($id = 0, db $db = null) {
		parent::__construct($db);
		$this->id = $id;
		$this->vatrate = $GLOBALS['param']['vat_rate'];
	}

	function __get($name) {
		if (!isset($this->invoiceoptions[$name])) {
			$this->invoiceoptions[$name] = null;
			$this->load_options();
		}

		return $this->invoiceoptions[$name];
	}

	function __set($name, $value) {
		$this->invoiceoptions[$name] = $value;
	}

	function __isset($name) {
		return isset($this->invoiceoptions[$name]);
	}
	
	function url() {
		return link_content("content=invoice.php&invoice_id=".$this->id);
	}

	function link_to_edit($string = "") {
		$path = "content=invoice.php&invoice_id=".$this->id;

		if ($this->project_id > 0) {
			$path .= "&project_id=".(int)$this->project_id;
		}

		return Html_Tag::a(link_content($path), $string);
	}

	function get_last_invoice_contact($project_id) {
		$invoices = new Invoices();
		$invoices->project_id = $project_id;
		$invoices->set_limit(1);
		$invoices->set_order("day", "DESC");
		$invoices->select();
	
		if ($invoices->count() == 1) {
			foreach ($invoices as $invoice) {
				$contact_id = $invoice->contact_id;
			}
			return $contact_id;
		} else {
			return false;
		}
	}
	
	function prepare($project_id) {
		$this->project_id = (int)$project_id;
		$project = new Project();
		if ($project->load((int)$this->project_id)) {
			$last_contact_id = $this->get_last_invoice_contact($this->project_id);
			if ($last_contact_id) {
				$this->contact_id = $last_contact_id;
			} else {
				$contacts = new Project_Contacts($this->project_id);
				$this->contact_id = $contacts->first_contact_id();
			}
			return true;
		} else {
			return false;
		}
	}

	function save_options() {
		foreach ($this->invoiceoptions as $name => $value) {
			if ($value === null) {
				$option = new Invoice_Option();
				$option->invoice_id = $this->id;
				$option->name = $name;
				if ($option->match_existing(array("invoice_id", "name"))) {
					$option->load();
					$option->delete();
				}
			} else {
				$option = new Invoice_Option();
				$option->invoice_id = $this->id;
				$option->name = $name;
				$option->value = $value;
				$option->save();
			}
		}
	}

	function save_in_cascade() {
		$result = $this->save();
		$this->save_options();

		return $result;
	}

	function fill_in_cascade($values) {
		return $this->fill($values);
	}

	function clean_in_cascade($array) {
		if (isset($array['start']['d']) and isset($array['start']['m']) and isset($array['start']['Y'])) {
			if ((int)$array['start']['d'] == 0 and (int)$array['start']['m'] == 0 and (int)$array['start']['Y'] == 0) {
				$array['start'] = null;
			} else {
				$array['start'] = adodb_mktime(0, 0, 0, $array['start']['m'], $array['start']['d'], $array['start']['Y']);
			}
		}
		if (isset($array['stop']['d']) and isset($array['stop']['m']) and isset($array['stop']['Y'])) {
			if ((int)$array['stop']['d'] == 0 and (int)$array['stop']['m'] == 0 and (int)$array['stop']['Y'] == 0) {
				$array['stop'] = null;
			} else {
				$array['stop'] = adodb_mktime(0, 0, 0, $array['stop']['m'], $array['stop']['d'], $array['stop']['Y']);
			}
		}
		if (isset($array['paymentdate']['d']) and isset($array['paymentdate']['m']) and isset($array['paymentdate']['Y'])) {
			if ((int)$array['paymentdate']['d'] == 0 and (int)$array['paymentdate']['m'] == 0 and (int)$array['paymentdate']['Y'] == 0) {
				$array['paymentdate'] = null;
			} else {
				$array['paymentdate'] = adodb_mktime(0, 0, 0, $array['paymentdate']['m'], $array['paymentdate']['d'], $array['paymentdate']['Y']);
			}
		}
		return $this->clean($array);
	}

	function clean(array $array) {
		if (isset($array['day']['d']) and isset($array['day']['m']) and isset($array['day']['Y'])) {
			$array['day'] = adodb_mktime(0, 0, 0, $array['day']['m'], $array['day']['d'], $array['day']['Y']);
		}
		if (isset($array['vatrate'])) {
			$array['vatrate'] = to_float($array['vatrate']);
		}
		
		return $array;
	}

	function filter(array $array) {
		if (isset($array['day']['d']) && isset($array['day']['m']) && isset($array['day']['Y'])) {
			$array['day'] = adodb_mktime(0, 0, 0, $array['day']['m'], $array['day']['d'], $array['day']['Y']);
		}
		if (isset($array['vatrate'])) {
			$array['vatrate'] = preg_replace("/,/", ".", $array['vatrate']);
		}

		return $array;
	}

	function load_options() {
		$options = new Invoice_Options();
		$options->invoice_id = $this->id;
		$options->select();
		foreach($options->select() as $option) {
			$this->invoiceoptions[$option->name] = $option->value;
		}
		return true;
	}

	function load_in_cascade($id = null) {
		if ($this->load($id)) {
			return $this->load_options();
		} else {
			return false;
		}
	}

	function load($id = null, $table = "invoice", $columns = null) {
		return parent::load($id, $table, $columns);
	}

	function transform_into_credit_note($id = 0) {
		if ($this->load($id)) {
			$lines = $this->get_lines();

			$this->id = 0;
			$this->day = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
			$this->number = $this->number_next();
			$this->quote_id = 0;
			$this->user_id = isset($_SESSION['userid']) ? $_SESSION['userid'] : 0;
			$this->insert();

			 foreach ($lines as $invoiceline) {
				$invoiceline->transform_into_credit_note($this->id);
			}
			$this->update();

			return true;
		} else {
			return false;
		}
	}

	function duplicate() {
		if ($this->load()) {
			$lines = $this->get_lines();

			$this->id = 0;
			$this->day = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
			$this->number = $this->number_next();
			$this->quote_id = 0;
			$this->user_id = isset($_SESSION['userid']) ? $_SESSION['userid'] : 0;
			$this->insert();

			 foreach ($lines as $invoiceline) {
				$invoiceline->invoice_id = $this->id;
				$invoiceline->insert();
			}

			$this->update();

			return true;
		} else {
			return false;
		}
	}

	function mark_as_paid() {
		$salefigure = new Salefigure();
		$salefigure->invoice_id = $this->id;
		if ($salefigure->match_existing(array("invoice_id"))) {
			if ($salefigure->load()) {
				$salefigure->amount_paid = $salefigure->amount;
				return $salefigure->save();
			}
		}
		return false;
	}

	function close_corresponding_project() {
		$project = new Project();
		$project->id = $this->project_id;
		$project->load();
		return $project->close();
	}

	function insert() {
		$result = $this->db->getID("
			INSERT INTO ".$this->db->config['table_invoice']."
			SET project_id = ".(int)$this->project_id.",
			user_id = ".(int)$this->user_id.",
			contact_id = ".(int)$this->contact_id.",
			quote_id = ".(int)$this->quote_id.",
			number = ".$this->db->quote($this->number).",
			title = ".$this->db->quote($this->title).",
			description = ".$this->db->quote($this->description).",
			comment = ".$this->db->quote($this->comment).",
			vatrate = ".(float)$this->vatrate.",
			invoicelink_id = ".(int)$this->invoicelink_id.",
			day = ".(int)$this->day.",
			time = ".time()
		);

		if (!$result[1]) {
			return false;
		} else {
			$this->id = $result[2];
			$salefigure = new Salefigure();
			$salefigure->invoice_id = $this->id;
			if ($salefigure->match_existing(array("invoice_id"))) {
				$salefigure->load();
			}
			$salefigure->day = $this->day;
			$salefigure->user_id = $this->user_id;
			$salefigure->project_id = $this->project_id;
			$salefigure->salefigure_number = $this->number;
			$salefigure->invoice_id = $this->id;
			$salefigure->contact_id = $this->contact_id;
			$salefigure->description = $this->title;
			$salefigure->amount = $this->amount_ex_vat();
			$salefigure->vat = $this->vatrate;
			$salefigure->save();

			return $this->load();
		}
	}

	function update() {
		if ($this->id <= 0) {
			return false;
		} else {
			$result = $this->db->query("
				UPDATE ".$this->db->config['table_invoice']."
				SET project_id = ".(int)$this->project_id.",
				user_id = ".(int)$this->user_id.",
				contact_id = ".(int)$this->contact_id.",
				quote_id = ".(int)$this->quote_id.",
				number = ".$this->db->quote($this->number).",
				title = ".$this->db->quote($this->title).",
				description = ".$this->db->quote($this->description).",
				comment = ".$this->db->quote($this->comment).",
				vatrate = ".(float)$this->vatrate.",
				invoicelink_id = ".(int)$this->invoicelink_id.",
				day = ".(int)$this->day.",
				time = ".time()."
				WHERE id = ".(int)$this->id
			);

			$salefigure = new Salefigure();
			$salefigure->invoice_id = $this->id;
			if ($salefigure->match_existing(array("invoice_id"))) {
				$salefigure->load();
			}
			$salefigure->day = $this->day;
			$salefigure->user_id = $this->user_id;
			$salefigure->project_id = $this->project_id;
			$salefigure->salefigure_number = $this->number;
			$salefigure->contact_id = $this->contact_id;
			$salefigure->description = $this->title;
			$salefigure->amount = $this->amount_ex_vat();
			$salefigure->vat = $this->vatrate;
			$salefigure->save();

			return $result[1] && $this->load();
		}
	}

	function delete() {
		if ($this->id <= 0) {
			return false;
		} else {
			$result = true;

			foreach ($this->get_lines() as $line) {
				$result = $line->delete();

				if (!$result == false) {
					break;
				}
			}

			if (!$result) {
				return false;
			} else {
				$result = $this->db->query("
					DELETE FROM ".$this->db->config['table_invoice']."
					WHERE id = ".(int)$this->id
				);

				$salefigure = new Salefigure();
				$salefigure->invoice_id = $this->id;
				if ($salefigure->match_existing(array("invoice_id"))) {
					$salefigure->delete();
				}

				return $result[1];
			}
		}
	}

	function save() {
		return $this->{$this->id <= 0 ? 'insert' : 'update'}();
	}

	function is_without_invoiceline() {
		return count($this->get_lines()) == 0;
	}

	function insert_line(Invoiceline $invoiceline) {
		if ($this->id <= 0 || $invoiceline->load()) {
			return false;
		} else {
			$invoiceline->invoice_id = $this->id;
			return $invoiceline->insert();
		}
	}

	function update_line(Invoiceline $invoiceline) {
		return $invoiceline->invoice_id != $this->id ? false : $invoiceline->update();
	}

	function delete_line(Invoiceline $invoiceline) {
		return !$invoiceline->load() ? false : $invoiceline->invoice_id != $this->id ? false : $invoiceline->delete();
	}

	function save_line(Invoiceline $invoiceline) {
		if ($this->id <= 0) {
			return false;
		} else {
			$invoiceline->invoice_id = $this->id;
			return $invoiceline->save();
		}
	}

	function is_invoice() {
		return ($this->amount_ex_vat() >= 0);
	}

	function is_credit_note() {
		return !$this->is_invoice();
	}

	function amount_subject_to_vat() {
		$amount = 0;
		foreach ($this->get_lines() as $line) {
			if ($line->vatrate > 0) {
				$amount += $line->amount();
			}
		}
		return $amount;
	}

	function amount_subject_to_vat_absolute() {
		return abs($this->amount_subject_to_vat());
	}

	function amount_not_subject_to_vat() {
		$amount = 0;
		foreach ($this->get_lines() as $line) {
			if ($line->vatrate == 0) {
				$amount += $line->amount();
			}
		}
		return $amount;
	}

	function amount_not_subject_to_vat_absolute() {
		return abs($this->amount_not_subject_to_vat());
	}

	function amount_ex_vat_paid() {
		$salefigure = new Salefigure();
		$salefigure->invoice_id = $this->id;
		if ($salefigure->match_existing(array("invoice_id"))) {
			if ($salefigure->load()) {
				return $salefigure->amount_paid;
			}
		}
		return 0;
		
	}
	
	function amount_ex_vat() {
		$amount = 0.0;
		foreach ($this->get_lines() as $line) {
			$amount += $line->amount();
		}

		return $amount;
	}

	function vat_paid() {
		return $this->amount_ex_vat_paid() * ($this->vatrate / 100);
	}
	
	function vat() {
		$amount = 0.0;
		foreach ($this->get_lines() as $line) {
			$amount += $line->amount() * ($line->vatrate / 100);
		}
		return $amount;
	}

	function vat_with_rate($vatrate) {
		$amount = 0.0;
		foreach ($this->get_lines() as $line) {
			if ($line->vatrate == $vatrate) {
				$amount += $line->amount() * ($line->vatrate / 100);
			}
		}
		return $amount;
	}

	function vatrates() {
		$vatrates = array();
		$vatrates[] = $this->vatrate;
		foreach ($this->get_lines() as $line) {
			$vatrates[] = $line->vatrate;
		}
		$vatrates = array_unique($vatrates);
		sort($vatrates);
		return $vatrates;
	}

	function amount_incl_vat_paid() {
		return $this->amount_ex_vat_paid() + $this->vat_paid();
	}
	
	function amount_incl_vat() {
		return $this->amount_ex_vat() + $this->vat();
	}

	function get_price() {
		$text = __("Total exc. VAT : %s", array($this->get_amount_ex_vat()));

		$vatrates = $this->vatrates();
		if (count($vatrates) > 0) {
			$vatrate_at_0 = true;
			foreach ($vatrates as $vatrate) {
				if ($vatrate > 0) {
					$amount_vat_with_rate = $this->amount_vat_absolute_with_rate($vatrate);
					if ($amount_vat_with_rate > 0) {
						$text .= "\n".__("Total VAT (%s) : %s", array(Format::percentage($vatrate), $this->get_amount_vat_with_rate($vatrate)));
						$vatrate_at_0 = false;
					}
				}
			}
			if (!$vatrate_at_0) {
				$text .= "\n".__("Total incl. VAT : %s", array($this->get_amount_incl_vat()));
			}
		}

		return html_entity_decode($text, ENT_COMPAT, "UTF-8");
	}

	function get_type() {
		if ($this->is_credit_note()) {
			return $GLOBALS['txt_creditnote'];
		} else {
			return $GLOBALS['txt_invoice'];
		}
	}

	function get_lines() {
		$lines = Plugins::factory("Invoicelines");
		$lines->invoice_id = (int)$this->id;
		return $lines->select();
	}

	function amount_ex_vat_absolute() {
		return abs($this->amount_ex_vat());
	}

	function get_amount_ex_vat() {
		$text = Format::currency_amount($this->amount_ex_vat_absolute());
		return html_entity_decode($text, ENT_COMPAT, "UTF-8");
	}

	function amount_vat_absolute() {
		return abs($this->amount_vat());
	}

	function amount_vat_paid() {
		return $this->vat_paid();
	}
	
	function amount_vat() {
		return $this->vat($this->vatrate);
	}

	function amount_vat_absolute_with_rate($vatrate) {
		return abs($this->amount_vat_with_rate($vatrate));
	}

	function amount_vat_with_rate($vatrate) {
		return $this->vat_with_rate($vatrate);
	}

	function get_amount_vat() {
		$text = Format::currency_amount($this->amount_vat_absolute());
		return html_entity_decode($text, ENT_COMPAT, "UTF-8");
	}

	function amount_incl_vat_absolute() {
		return abs($this->amount_incl_vat($this->vatrate));
	}

	function get_amount_incl_vat() {
		$text = Format::currency_amount($this->amount_incl_vat_absolute());
		return html_entity_decode($text, ENT_COMPAT, "UTF-8");
	}

	function get_amount_vat_with_rate($vatrate) {
		$text = Format::currency_amount($this->amount_vat_absolute_with_rate($vatrate));
		return html_entity_decode($text, ENT_COMPAT, "UTF-8");
	}

	function get_taxnumber() {
		$taxnumber = "";

		if ($this->contact_id > 0) {
			$contact = new Contact();
			if ($contact->load($this->contact_id)) {
				$taxnumber = $contact->text_taxnumber();
			}
		}

		return trim($taxnumber);
	}

	function get_email() {
		$email = "";

		if ($this->contact_id > 0) {
			$contact = new Contact();
			if ($contact->load($this->contact_id)) {
				$email = $contact->text_email();
			}
		}

		return trim($email);
	}

	function get_company() {
		$company = "";
		if ($this->contact_id > 0) {
			$contact = new Contact();
			if ($contact->load($this->contact_id)) {
				$company = $contact->text_company();
			}
		}
		return trim($company);
	}

	function get_full_name() {
		$fullname = "";
		if ($this->contact_id > 0) {
			$contact = new Contact();
			if ($contact->load($this->contact_id)) {
				$fullname = $contact->text_firstname()." ".$contact->text_lastname();
			}
		}
		return trim($fullname);
	}

	function get_postal_adress() {
		$postaladress = "";

		if ($this->contact_id > 0) {
			$contact = new Contact();
			if ($contact->load($this->contact_id)) {
				$postaladress = $contact->text_postal_address();
			}
		}

		return trim($postaladress);
	}

	function form() {
		$id = new Html_Input("invoice[id]", $this->id, "hidden");
		$project_id = new Html_Input("invoice[project_id]", $this->project_id, "hidden");
		$user_id = new Html_Input("invoice[user_id]", $this->user_id, "hidden");

		$html = "<form method=\"post\" name=\"form_invoice\" id=\"form_invoice\" action=\"\">";
		$html .= $id->input();
		$html .= $project_id->input();
		$html .= $user_id->input();
		$html .= $this->grid()->show();
		$html .= "</form>";

		return $html;
	}

	function grid() {
		$list = array();

		$number = new Html_Input("invoice[number]", empty($this->number) ? $this->number_next() : $this->number);

		$title = new Html_Input("invoice[title]", $this->title);
		$title->properties['size'] = $GLOBALS['htmlconfig']['text_size1'];

		$element = array();
		if (isset($this->contact_id) and $this->contact_id > 0) {
			$contact = new Contact($this->contact_id);
			$contact->load();
			$element = array(
				$this->contact_id => $contact->link_fullname(),
			);
		}
		$contact = new Html_Input_Ajax("invoice[contact_id]", link_content("content=contacts.ajax.php"), $element);
		$contact->properties['size'] = $GLOBALS['htmlconfig']['text_size3'];

		$description = new Html_Textarea("invoice[description]", $this->description);
		$description->properties['cols'] = $GLOBALS['htmlconfig']['textbig_cols'];
		$description->properties['rows'] = $GLOBALS['htmlconfig']['textredac_rows'];

		$comment = new Html_Textarea("invoice[comment]", $this->comment);
		$comment->properties['cols'] = $GLOBALS['htmlconfig']['textbig_cols'];
		$comment->properties['rows'] = $GLOBALS['htmlconfig']['textredac_rows'];
		
		if ($this->day == 0) {
			$this->day = time();
		}
		$day = new Html_Input_Date("invoice[day]", $this->day);

		$list['number'] = array(
			'value' => $number->item($GLOBALS['txt_number']),
			'class' => "clearfix itemsform-head itemsform-bold",
		);

		$list['title'] = array(
			'value' => $title->item($GLOBALS['txt_title']),
			'class' => "clearfix itemsform-head itemsform-bold",
		);

		$list['day'] = array(
			'value' => $day->item($GLOBALS['txt_day']),
			'class' => "clearfix itemsform-head",
		);

		$list['contact_id'] = array(
			'value' => $contact->item($GLOBALS['txt_contact']),
			'class' => "clearfix",
		);

		if ($GLOBALS['param']['invoice_multiplevatrates'] == 0) {
			$vatrate = new Html_Input("invoice[vatrate]", $this->vatrate);
			$list['vatrate'] = array(
				'value' => $vatrate->item($GLOBALS['txt_vat_rate']),
				'class' => "clearfix",
			);
		}

		if ($GLOBALS['param']['invoice_link']) {
			$invoicelinks = new Invoice_Links();
			$invoicelinks->set_order("name", "ASC");
			$invoicelinks->select();
			$invoicelink_id = new Html_Select("invoice[invoicelink_id]", array('--' => "--") + $invoicelinks->names(), $this->invoicelink_id);
			$list['invoicelink_id'] = array(
				'value' => $invoicelink_id->item($GLOBALS['param']['invoice_link']),
				'class' => "clearfix",
			);
		}

		$list['description'] = array(
			'value' => $description->item($GLOBALS['txt_description'], __("Add new description")),
			'class' => "clearfix",
		);

		if ($GLOBALS['param']['invoiceoptions_start']) {
			$start = new Html_Input_Date("invoice[start]", $this->start);
			$list['start'] = array(
				'value' => $start->item($GLOBALS['txt_startdate'], __("Add new start date")),
				'class' => "clearfix",
			);
		}

		if ($GLOBALS['param']['invoiceoptions_stop']) {
			$stop = new Html_Input_Date("invoice[stop]", $this->stop);
			$list['stop'] = array(
				'value' => $stop->item($GLOBALS['txt_enddate'], __("Add new end date")),
				'class' => "clearfix",
			);
		}

		if ($GLOBALS['param']['invoiceoptions_paymentdate']) {
			$paymentdate = new Html_Input_Date("invoice[paymentdate]", $this->paymentdate);
			$list['paymentdate'] = array(
					'value' => $paymentdate->item(__("payment date"), __("Add new payment date")),
					'class' => "clearfix",
			);
		}

		if ($GLOBALS['param']['invoiceoptions_status']) {
			$status = new Html_Select("invoice[status]", array('--' => "--") + $GLOBALS['array_invoice_status'], $this->status);
			$list['status'] = array(
					'value' => $status->item(__("status")),
					'class' => "clearfix",
			);
		}

		$lines = $this->get_lines();

		foreach ($lines as $line) {
			$widget = $line->widget();
			if ($widget != '') {
				$list['line-'.$line->id] = array(
					'value' => $widget,
					'class' => "clearfix",
				);
			}
		}

		foreach ($lines->get_invoiceline_classes() as $class) {
			$line = new $class();
			$line->invoice_id = $this->id;
			$line->vatrate = $this->vatrate;
			$list['line-new-'.$class] = array(
				'value' => $line->widget(),
				'class' => "clearfix",
			);
		}

		$list['comment'] = array(
				'value' => $comment->item($GLOBALS['txt_comment'], __("Add new comment")),
				'class' => "clearfix",
		);
		
		$save = new Html_Input_Save("save");

		$list['save'] = array(
			'value' => $save->input(),
			'class' => "clearfix",
		);

		$items = new Html_List(array('leaves' => $list, 'class' => "itemsform"));

		return $items;
	}

	function actions() {
		return array();
	}

	function alerts() {
		$alerts = array();

		if (sizeof($this->get_lines())) {
			$action = new Html_Input("export", "", "hidden");
			$document = new Html_Input("document", "invoice", "hidden");
			$id = new Html_Input("invoice[id]", $this->id, "hidden");
			$method = new Html_Input("method", "mime", "hidden");

			$html = "<form method=\"post\" action=\"\" name=\"form_export_invoice\" id=\"form_export_invoice\">";
			$html .= $action->input().$document->input().$id->input().$method->input();
			$html .= "<a class=\"autosubmit\" href=\"#\">".$GLOBALS['status_exportodt']."</a>";
			$html .= "</form>\n";

			$alerts['export-invoice']['value'] = $html;
		}


		return $alerts;
	}

	function number_next() {
		$this->db->query("
			LOCK TABLES ".$this->db->config['table_invoice']." WRITE,
			".$this->db->config['table_salefigure']." WRITE
		");
		$number = $this->db->getValue("
			SELECT number
			FROM ".$this->db->config['table_invoice']."
			ORDER BY CAST(REVERSE(SUBSTR(CAST(CONCAT('1', REVERSE(number)) AS UNSIGNED) FROM 2)) AS UNSIGNED) DESC
			LIMIT 0, 1
		");
		$this->db->query("UNLOCK TABLES");

		if (is_numeric($number)) {
			$number += 1;
		} else {
			$numeric_end = preg_match("/([0-9]*)$/", $number, $matches);
			if (isset($matches[0])) {
				$number_start = substr($number, 0, strlen($number) - strlen($matches[0]));
				$number_stop = str_pad((int)$matches[0] + 1, strlen($matches[0]), "0", STR_PAD_LEFT);
				$number = $number_start.$number_stop;
			} else {
				$number = 1;
			}
		}

		return $number;
	}

	function create(User $user, Project $project) {
		if (!$user->load() || !$project->load()) {
			return false;
		}

		$this->reset();
		$this->prepare($project->id);

		$this->number = $this->number_next();
		$this->title = $project->name;
		$this->user_id = $user->id;
		$this->day = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
		$this->vatrate = $GLOBALS['param']['vat_rate'];

		return $this->insert();
	}

	function add_material($material, $start, $stop) {
		switch ($material) {
			case "requests_with_amount":
				return $this->add_requests_with_amount();
			case "requests":
				return $this->add_hours_by_requests($start, $stop);
			case "hours_by_hour_links":
				return $this->add_hours_by_hour_links($start, $stop);
			case "hours_and_expenses":
				$this->add_hours($start, $stop);
				return $this->add_expenses($start, $stop);
			case "hours":
				return $this->add_hours($start, $stop);
		}
	}

	function add_expenses($start, $stop) {
		if ($this->id <= 0) {
			return false;
		}

		$expenses = new Expenses();
		$expenses->admin = true;
		$expenses->start = $start;
		$expenses->stop = $stop;
		$expenses->project_id = $this->project_id;
		$expenses->select();

		if (count($expenses) == 0) {
			return false;
		} else {
			$this->start = $start;
			$this->stop = $stop;

			foreach ($expenses as $expense) {
				if (!isset($lines[$expense->expensesubject_id])) {
					$lines[$expense->expensesubject_id] = 0;
				}
				$lines[$expense->expensesubject_id] += $expense->amount;
			}

			foreach ($lines as $expensesubject_id => $amount) {
				$expensesubject = new Expense_Subject($expensesubject_id);
				$expensesubject->load();

				$line = new Invoicelineexpense();
				$line->expensesubject_id = $expensesubject_id;
				$line->quantity = $amount;
				$line->description = $expensesubject->name;
				$line->title = $expensesubject->name;
				$line->invoice_id = $this->id;
				$line->save();
			}

			return true;
		}
	}

	function add_hours($start, $stop) {
		if ($this->id > 0) {
			$hours = $this->db->query("
				SELECT ".$this->db->config['table_tasksubject'].".name AS title,
				".$this->db->config['table_user'].".id AS user_id,
				".$this->db->config['table_user'].".name AS description,
				".$this->db->config['table_hour'].".task_id,
				".$this->db->config['table_rateproject'].".amount,
				".$this->db->config['table_hour'].".span AS span
				FROM ".$this->db->config['table_hour']."
				LEFT JOIN ".$this->db->config['table_tasksubject']."
				ON (".$this->db->config['table_hour'].".task_id = ".$this->db->config['table_tasksubject'].".id)
				INNER JOIN ".$this->db->config['table_user']."
				ON (".$this->db->config['table_hour'].".user_id = ".$this->db->config['table_user'].".id)
				LEFT JOIN ".$this->db->config['table_rateproject']."
				ON ".$this->db->config['table_tasksubject'].".id = ".$this->db->config['table_rateproject'].".task_id
				WHERE ".$this->db->config['table_hour'].".project_id = ".$this->project_id."
				AND ".$this->db->config['table_hour'].".day BETWEEN ".$start." AND ".$stop."
				GROUP BY ".$this->db->config['table_hour'].".id
				ORDER BY ".$this->db->config['table_rateproject'].".amount DESC
			");

			if (!$hours || $hours[1] <= 0) {
				return false;
			} else {
				$this->start = $start;
				$this->stop = $stop;

				$hours = $hours[0];
				$lines = array();
				while ($hour = $this->db->fetchArray($hours)) {
					if ($hour['task_id'] == 0) {
						if (!isset($tasks[$hour['user_id']])) {
							$user = new User($hour['user_id']);

							$task = new Task($user->task_id());
							$task->load();

							$tasks[$hour['user_id']] = $task;
						}

						$hour['task_id'] = $tasks[$hour['user_id']]->id;
						$hour['title'] = $tasks[$hour['user_id']]->name;
					}

					if (!isset($lines[$hour['task_id']])) {
						$lines[$hour['task_id']] = array(
							'title' => $hour['title'],
							'description' => array(),
							'span' => 0,
							'task_id' => $hour['task_id'],
						);
					}
					$lines[$hour['task_id']]['span'] += $hour['span'];
					$lines[$hour['task_id']]['description'][] = $hour['description'];
				}

				foreach ($lines as $line) {
					$line['description'] = join(", ", array_unique($line['description']));
					$invoiceline = new Invoicelinespan();
					$invoiceline->title = $line['title'];
					$invoiceline->description = $line['description'];
					$invoiceline->span = $line['span'];
					$invoiceline->task_id = $line['task_id'];
					$this->insert_line($invoiceline);
				}

				return true;
			}
		}
	}

	function add_requests_with_amount() {
		if ($this->id > 0) {
			$requests = new Requests();
			$requests->project_id = $this->project_id;
			$requests->select();

			foreach ($requests as $request) {
				if ($request->amount > 0) {
					$invoiceline = new Invoicelinesimple();
					$invoiceline->title = $request->titre;
					$invoiceline->description = $request->description;
					$invoiceline->amount = $request->amount;
					$this->insert_line($invoiceline);
				}
			}

			return true;
		}
	}

	function add_hours_by_hour_links($start, $stop) {
		if ($this->id > 0) {
			$hours = $this->db->query("
					SELECT ".$this->db->config['table_tasksubject'].".name AS title,
					".$this->db->config['table_user'].".id AS user_id,
					".$this->db->config['table_user'].".name AS description,
					".$this->db->config['table_hour'].".day,
					".$this->db->config['table_hour'].".task_id,
					".$this->db->config['table_hour'].".hourlink_id,
					".$this->db->config['table_rateproject'].".amount,
					".$this->db->config['table_hour'].".span AS span
					FROM ".$this->db->config['table_hour']."
					LEFT JOIN ".$this->db->config['table_tasksubject']."
					ON (".$this->db->config['table_hour'].".task_id = ".$this->db->config['table_tasksubject'].".id)
					INNER JOIN ".$this->db->config['table_user']."
					ON (".$this->db->config['table_hour'].".user_id = ".$this->db->config['table_user'].".id)
					LEFT JOIN ".$this->db->config['table_rateproject']."
					ON ".$this->db->config['table_tasksubject'].".id = ".$this->db->config['table_rateproject'].".task_id
					WHERE ".$this->db->config['table_hour'].".project_id = ".$this->project_id."
					AND ".$this->db->config['table_hour'].".day BETWEEN ".$start." AND ".$stop."
					GROUP BY ".$this->db->config['table_hour'].".id
					ORDER BY ".$this->db->config['table_hour'].".day ASC"
			);

			if (!$hours || $hours[1] <= 0) {
				return false;
			} else {
				$hours = $hours[0];

				$tasks_options = new User_Options_Dated();
				$tasks_options->name = "task_id";
				$tasks_options->select();

				$this->start = $start;
				$this->stop = $stop;

				$lines = array();
				while ($hour = $this->db->fetchArray($hours)) {
					if ($hour['task_id'] == 0) {
						$hour['task_id'] = $tasks_options->value_at_or_first($hour['day'], $hour['user_id']);

					}

					if (!isset($tasks[$hour['task_id']])){
						$task = new Task();
						$task->load($hour['task_id']);
						$tasks[$hour['task_id']] = $task->name;
					}

					if (!isset($hour_links[$hour['hourlink_id']])){
						$hour_link = new Hour_Link();
						$hour_link->id = $hour['hourlink_id'];
						$hour_links[$hour['hourlink_id']] = $hour_link->load() ? $hour_link->name : $GLOBALS['txt_noname'];
					}

					if (!isset($lines[$hour['hourlink_id']][$hour['task_id']])) {
						$lines[$hour['hourlink_id']][$hour['task_id']] = array(
								'title' => $hour_links[$hour['hourlink_id']]." (".$tasks[$hour['task_id']]. ")",
								'description' => array(),
								'span' => 0,
								'task_id' => $hour['task_id'],
						);
					}
					$lines[$hour['hourlink_id']][$hour['task_id']]['span'] += $hour['span'];
					$lines[$hour['hourlink_id']][$hour['task_id']]['description'][] = $hour['description'];
				}

				foreach ($lines as $hourlink_id => $values) {
					foreach ($values as $line){
						$line['description'] = join(", ", array_unique($line['description']));
						$invoiceline = new Invoicelinespan();
						$invoiceline->title = $line['title'];
						$invoiceline->description = $line['description'];
						$invoiceline->span = $line['span'];
						$invoiceline->task_id = $line['task_id'];
						$this->insert_line($invoiceline);
					}
				}

				return true;
			}
		}
	}

	function add_hours_by_requests($start, $stop) {
		if ($this->id > 0) {
			$hours = $this->db->query("
				SELECT ".$this->db->config['table_tasksubject'].".name AS title,
				".$this->db->config['table_user'].".id AS user_id,
				".$this->db->config['table_user'].".name AS description,
				".$this->db->config['table_hour'].".day,
				".$this->db->config['table_hour'].".task_id,
				".$this->db->config['table_hour'].".request_id,
				".$this->db->config['table_rateproject'].".amount,
				".$this->db->config['table_hour'].".span AS span
				FROM ".$this->db->config['table_hour']."
				LEFT JOIN ".$this->db->config['table_tasksubject']."
				ON (".$this->db->config['table_hour'].".task_id = ".$this->db->config['table_tasksubject'].".id)
				INNER JOIN ".$this->db->config['table_user']."
				ON (".$this->db->config['table_hour'].".user_id = ".$this->db->config['table_user'].".id)
				LEFT JOIN ".$this->db->config['table_rateproject']."
				ON ".$this->db->config['table_tasksubject'].".id = ".$this->db->config['table_rateproject'].".task_id
				WHERE ".$this->db->config['table_hour'].".project_id = ".$this->project_id."
				AND ".$this->db->config['table_hour'].".day BETWEEN ".$start." AND ".$stop."
				GROUP BY ".$this->db->config['table_hour'].".id
				ORDER BY ".$this->db->config['table_hour'].".day ASC"
			);

			if (!$hours || $hours[1] <= 0) {
				return false;
			} else {
				$hours = $hours[0];

				$tasks_options = new User_Options_Dated();
				$tasks_options->name = "task_id";
				$tasks_options->select();

				$this->start = $start;
				$this->stop = $stop;

				$lines = array();
				while ($hour = $this->db->fetchArray($hours)) {
					if ($hour['task_id'] == 0) {
 						$hour['task_id'] = $tasks_options->value_at_or_first($hour['day'], $hour['user_id']);

					}

					if (!isset($tasks[$hour['task_id']])){
						$task = new Task();
						$task->load($hour['task_id']);
						$tasks[$hour['task_id']] = $task->name;
					}

					if (!isset($requests[$hour['request_id']])){
						$request = new Request();
						$request->request_id = $hour['request_id'];
						$requests[$hour['request_id']] = $request->load() ? $request->titre : $GLOBALS['txt_noname'];
					}

					if (!isset($lines[$hour['request_id']][$hour['task_id']])) {
						$lines[$hour['request_id']][$hour['task_id']] = array(
							'title' => $requests[$hour['request_id']]." (".$tasks[$hour['task_id']]. ")",
							'description' => array(),
							'span' => 0,
							'task_id' => $hour['task_id'],
						);
					}
					$lines[$hour['request_id']][$hour['task_id']]['span'] += $hour['span'];
					$lines[$hour['request_id']][$hour['task_id']]['description'][] = $hour['description'];
				}

				foreach ($lines as $request_id => $values) {
					foreach ($values as $line){
						$line['description'] = join(", ", array_unique($line['description']));
						$invoiceline = new Invoicelinespan();
						$invoiceline->title = $line['title'];
						$invoiceline->description = $line['description'];
						$invoiceline->span = $line['span'];
						$invoiceline->task_id = $line['task_id'];
						$this->insert_line($invoiceline);
					}
				}

				return true;
			}
		}
	}

	static function get_from_dates(User $user, Project $project, $start, $stop) {
		$invoice = new Invoice();

		if (!$invoice->create_from_dates($user, $project, $start, $stop)) {
			return null;
		} else {
			return $invoice;
		}
	}
}
