<?php
/*
	opentime
	$Author$
	$URL$
	$Revision$

	Copyright (C) No Parking 2007 - 2018
*/

class Salefigure extends Record {
	public $id = 0;
	public $salefigure_number = "";
	public $amount = 0.0;
	public $amount_paid = 0.0;
	public $day = 0;
	public $project_id = 0;
	public $description = "";
	public $user_id = 0;
	public $contact_id = 0;
	public $invoice_id = 0;
	public $vat = 0.0;
	public $time = 0;

	protected $project_currencies = null;

	private $salefigureoptions = array();

	function __construct($id = 0, db $db = null) {
		parent::__construct($db);
		$this->id = $id;
	}

	function __get($name) {
		if (!isset($this->salefigureoptions[$name])) {
			$this->salefigureoptions[$name] = null;
			$this->load_options();
		}

		return $this->salefigureoptions[$name];
	}

	function __set($name, $value) {
		$this->salefigureoptions[$name] = $value;
	}

	function __isset($name) {
		return isset($this->salefigureoptions[$name]);
	}
	
	function as_array_exposed() {
		$project = new Project();
		$project->load($this->project_id);

		$customer = new Customer();
		$customer->load($project->customer_id);
		
		$user = new User();
		$user->load($this->user_id);
		
		$contact = new Contact();
		$contact->load($this->contact_id);

		return array(
			'id' => $this->id,
			'salefigure_number' => $this->salefigure_number,
			'amount' => $this->amount,
			'amount_paid' => $this->amount_paid,
			'day' => $this->day,
			'project_id' => $this->project_id,
			'project_name' => $project->name(),
			'project_name_in_full' => $project->name_in_full(),
			'customer_id' => $customer->id,
			'customer_name' => $customer->name(),
			'description' => $this->description,
			'user_id' => $this->user_id,
			'user_name' => $user->name(),
			'contact_id' => $this->contact_id,
			'contact_name_in_full' => $contact->fullname(),
			'invoice_id' => $this->invoice_id,
			'vat' => $this->vat,
			'time' => $this->time,
		);
	}
	
	function fill_in_cascade($hash) {
		$result = $this->fill($hash);

		if ($GLOBALS['param']['salefigureoptions_forecastamount'] and isset($hash['forecastamount'])) {
			$this->forecastamount = $hash['forecastamount'];
		}
		if ($GLOBALS['param']['salefigureoptions_forecastdate'] and isset($hash['forecastdate'])) {
			$this->forecastdate = $hash['forecastdate'];
		}
		if ($GLOBALS['param']['salefigureoptions_maturity'] and isset($hash['maturity'])) {
			$this->maturity = trim($hash['maturity']);
		}
		if ($GLOBALS['param']['salefigureoptions_maturitydate']) {
			$this->maturitydate = strtotime("+ ".(int)$this->maturity."days", $this->day);
		}
		if ($GLOBALS['param']['salefigureoptions_url'] and isset($hash['url'])) {
			$this->url = trim(strip_tags($hash['url']));
		}
		if ($GLOBALS['param']['salefigureoptions_status'] and isset($hash['status'])) {
			$this->status = $hash['status'];
		}
		if ($GLOBALS['param']['salefigureoptions_paymentdate'] and isset($hash['paymentdate'])) {
			$this->paymentdate = $hash['paymentdate'];
		}
		if ($GLOBALS['param']['salefigureoptions_paymentmode'] and isset($hash['paymentmode'])) {
			$this->paymentmode = $hash['paymentmode'];
		}
		if ($GLOBALS['param']['salefigureoptions_paymentcomment'] and isset($hash['paymentcomment'])) {
			$this->paymentcomment = trim(strip_tags($hash['paymentcomment']));
		}

		return $result;
	}

	function clean_in_cascade($post) {
		$cleaned = $this->clean($post);

		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		
		if ($GLOBALS['param']['salefigureoptions_forecastamount']) {
			$cleaned['forecastamount'] = (isset($post['forecastamount'])) ? $this->project_currencies->unconvert((float)$post['forecastamount']) : 0.0;
		}
		if ($GLOBALS['param']['salefigureoptions_forecastdate']) {
			if (isset($post['forecastdate']['m']) and isset($post['forecastdate']['d']) and isset($post['forecastdate']['Y'])) {
				if ((int)$post['forecastdate']['m'] != 0 or (int)$post['forecastdate']['d'] != 0 or (int)$post['forecastdate']['Y']) {
					$cleaned['forecastdate'] = mktime(0, 0, 0, (int)$post['forecastdate']['m'], (int)$post['forecastdate']['d'], (int)$post['forecastdate']['Y']);
				} else {
					$cleaned['forecastdate'] = 0;
				}
			}
		}
		if ($GLOBALS['param']['salefigureoptions_maturity']) {
			$cleaned['maturity'] = isset($post['maturity']) ? (int)$post['maturity'] : 0;
		}
		if ($GLOBALS['param']['salefigureoptions_url']) {
			$cleaned['url'] = isset($post['url']) ? (string)$post['url'] : "";
		}
		if ($GLOBALS['param']['salefigureoptions_status']) {
			$cleaned['status'] = isset($post['status']) ? (int)$post['status'] : 0;
		}
		if ($GLOBALS['param']['salefigureoptions_paymentdate']) {
			if (isset($post['paymentdate']['m']) and isset($post['paymentdate']['d']) and isset($post['paymentdate']['Y'])) {
				if ((int)$post['paymentdate']['m'] != 0 or (int)$post['paymentdate']['d'] != 0 or (int)$post['paymentdate']['Y']) {
					$cleaned['paymentdate'] = mktime(0, 0, 0, (int)$post['paymentdate']['m'], (int)$post['paymentdate']['d'], (int)$post['paymentdate']['Y']);
				} else {
					$cleaned['paymentdate'] = 0;
				}
			}
		}
		if ($GLOBALS['param']['salefigureoptions_paymentmode']) {
			$cleaned['paymentmode'] = isset($post['paymentmode']) ? (int)$post['paymentmode'] : 0;
		}
		if ($GLOBALS['param']['salefigureoptions_paymentcomment']) {
			$cleaned['paymentcomment'] = isset($post['paymentcomment']) ? strip_tags($post['paymentcomment']) : "";
		}
		if ($GLOBALS['param']['salefigureoptions_dispatchdate']) {
			if (isset($post['dispatchdate']['m']) and isset($post['dispatchdate']['d']) and isset($post['dispatchdate']['Y'])) {
				if ((int)$post['dispatchdate']['m'] != 0 or (int)$post['dispatchdate']['d'] != 0 or (int)$post['dispatchdate']['Y']) {
					$cleaned['dispatchdate'] = mktime(0, 0, 0, (int)$post['dispatchdate']['m'], (int)$post['dispatchdate']['d'], (int)$post['dispatchdate']['Y']);
				} else {
					$cleaned['dispatchdate'] = 0;
				}
			}
		}
		if ($GLOBALS['param']['salefigureoptions_dispatchmode']) {
			$cleaned['dispatchmode'] = isset($post['dispatchmode']) ? (int)$post['dispatchmode'] : 0;
		}
		if ($GLOBALS['param']['salefigureoptions_dispatchcomment']) {
			$cleaned['dispatchcomment'] = isset($post['dispatchcomment']) ? strip_tags($post['dispatchcomment']) : "";
		}
		
		return $cleaned;
	}

	function clean($post) {
		$project_id = isset($post['project_id']) ? (int)$post['project_id'] : $this->project_id;
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($project_id);
		}

		$cleaned = array(
			'id' => isset($post['id']) ? (int)$post['id'] : 0,
			'invoice_id' => isset($post['invoice_id']) ? (int)$post['invoice_id'] : 0,
			'salefigure_number' => isset($post['salefigure_number']) ? (string)$post['salefigure_number'] : "",
			'day' => (isset($post['day']['m']) and isset($post['day']['d']) and isset($post['day']['Y']) and ($post['day']['m'] or $post['day']['d'] or $post['day']['Y'])) ? mktime(0, 0, 0, (int)$post['day']['m'], (int)$post['day']['d'], (int)$post['day']['Y']) : "0",
			'amount' => (isset($post['amount'])) ? $this->project_currencies->unconvert((float)$post['amount']) : 0.0,
			'amount_paid' => (isset($post['amount_paid'])) ? $this->project_currencies->unconvert((float)$post['amount_paid']) : 0.0,
			'project_id' => $project_id,
			'description' => isset($post['description']) ? (string)$post['description'] : "",
			'user_id' => isset($post['user_id']) ? (int)$post['user_id'] : 0,
			'contact_id' => isset($post['contact_id']) ? (int)$post['contact_id'] : 0,
			'vat' => isset($post['vat']) ? to_float($post['vat']) : 0,
		);

		return $cleaned;
	}

	function actions() {
		return array();
	}

	function form() {
		$form = "<form method=\"post\" name=\"form_salefigure\" id=\"form_salefigure\" action=\"\" enctype=\"multipart/form-data\">";

		$id = new Html_Input("salefigure[id]", $this->id, "hidden");
		$invoice_id = new Html_Input("salefigure[invoice_id]", $this->invoice_id, "hidden");
		$form .= $id->input_hidden().$invoice_id->input_hidden();

		$salefigure_number = new Html_Input("salefigure[salefigure_number]", $this->salefigure_number);
		$day = new Html_Input_Date("salefigure[day]", $this->day);


		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		$amount = new Html_Input("salefigure[amount]", $this->project_currencies->convert($this->amount));
		$amount->properties['inside'] = "&nbsp;".$this->project_currencies->symbol();
		$amount->size = $GLOBALS['htmlconfig']['text_size4'];

		$amount_paid = new Html_Input("salefigure[amount_paid]", $this->project_currencies->convert($this->amount_paid));
		$amount_paid->properties['inside'] = "&nbsp;".$this->project_currencies->symbol();
		$amount_paid->size = $GLOBALS['htmlconfig']['text_size4'];

		$vat = new Html_Input("salefigure[vat]", $this->vat);
		$vat->size = $GLOBALS['htmlconfig']['text_size4'];

		$project = new Project();
		$project->load($this->project_id);
		$projects = new Projects_Collector();
		$projects->id_forced = $this->project_id;
		$projects->select();
		$project_id = new Html_Select_Multi("salefigure[customer_id]", "salefigure[project_id]", $projects->tree(), $project->customer_id(), $this->project_id);

		$description = new Html_Textarea("salefigure[description]", utf8_htmlentities($this->description));
		$description->properties['wrap'] = "virtual";
		$description->properties['rows'] = $GLOBALS['htmlconfig']['textarea_rows'];
		$description->properties['cols'] = $GLOBALS['htmlconfig']['textarea_cols'];

		$users = new Users();
		$users->select(array('id_forced' => $this->user_id));
		$user_id = new Html_Select("salefigure[user_id]", array('--' => "--") + $users->names(), $this->user_id);

		$element = array();
		if (isset($this->contact_id) and $this->contact_id > 0) {
			$contact = new Contact($this->contact_id);
			$contact->load();
			$element = array(
				$this->contact_id => $contact->link_fullname(),
			);
		}
		$contact_id = new Html_Input_Ajax("salefigure[contact_id]", link_content("content=contacts.ajax.php"), $element);
		$contact_id->properties['size'] = $GLOBALS['htmlconfig']['text_size3'];
		$contact_id->properties['class'] = "contact-autocomplete ajax-autocomplete";

		$list = array(
			'salefigure_number' => array(
				'class' => "itemsform-head itemsform-bold clearfix",
				'value' => $salefigure_number->item($GLOBALS['txt_number']),
			),
			'day' => array(
				'class' => "itemsform-bold clearfix",
				'value' => $day->item($GLOBALS['txt_day']),
			),
			'amount' => array(
				'class' => "itemsform-bold itemsform-bottom itemsform-currency clearfix",
				'value' => $amount->item($GLOBALS['txt_amount']),
			),
			'vat' => array(
				'class' => "clearfix",
				'value' => $vat->item($GLOBALS['txt_vat_rate']),
			),
			'amount_paid' => array(
				'class' => "itemsform-currency clearfix",
				'value' => $amount_paid->item($GLOBALS['txt_paidamount']),
			),
			'project_id' => array(
				'class' => "clearfix",
				'value' => $project_id->item($GLOBALS['param']['level_0']." / ".$GLOBALS['param']['level_1']),
			),
			'description' => array(
				'class' => "clearfix",
				'value' => $description->item($GLOBALS['txt_description']),
			),
			'user_id' => array(
				'class' => "clearfix",
				'value' => $user_id->item($GLOBALS['param']['user']),
			),
		);

		if ($GLOBALS['param']['ext_contacts']) {
			$list += array(
				'contact_id' => array(
					'class' => "clearfix",
					'value' => $contact_id->item($GLOBALS['txt_contact']),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_url']) {
			$url = new Html_Input("salefigure[url]", $this->url);
			$label = __("URL");
			if (!empty($this->url)) {
				$label = Html_Tag::a($this->url, $label);
			}
			$list += array(
				'url' => array(
					'class' => "clearfix",
					'value' => $url->item($label),
				),
			);
		}
		
		if ($GLOBALS['param']['salefigureoptions_forecastamount']) {
			$forecastamount = new Html_Input("salefigure[forecastamount]", $this->project_currencies->convert($this->forecastamount));
			$forecastamount->properties['inside'] = "&nbsp;".$this->project_currencies->symbol();
			$forecastamount->size = $GLOBALS['htmlconfig']['text_size4'];
			$list += array(
				'forecastamount' => array(
					'class' => "itemsform-currency clearfix",
					'value' => $forecastamount->item(__("forecasted amount")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_forecastdate']) {
			$forecastdate = new Html_Input_Date("salefigure[forecastdate]", $this->forecastdate);
			$list += array(
				'forecastdate' => array(
					'class' => "clearfix",
					'value' => $forecastdate->item(__("forecasted date")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_maturity']) {
			$maturity = new Html_Select("salefigure[maturity]", array('--' => "--") + $GLOBALS['array_salefigure_maturity'], $this->maturity);
			$list += array(
				'maturity' => array(
					'class' => "clearfix",
					'value' => $maturity->item(__("maturity")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_maturitydate']) {
			$maturitydate = new Html_Input_Date("salefigure[maturitydate]", $this->maturitydate);
			$maturitydate->disabled = "disabled";
			$list += array(
				'maturitydate' => array(
					'class' => "clearfix",
					'value' => $maturitydate->item(__("maturity date")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_status']) {
			$status = new Html_Select("salefigure[status]", array('--' => "--") + $GLOBALS['array_salefigure_status'], $this->status);
			$list += array(
				'status' => array(
					'class' => "clearfix",
					'value' => $status->item(__("status")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_dispatchdate']) {
			$dispatchdate = new Html_Input_Date("salefigure[dispatchdate]", $this->dispatchdate);
			$list += array(
				'dispatchdate' => array(
					'class' => "clearfix",
					'value' => $dispatchdate->item(__("dispatch date")),
				),
			);
		}
		
		if ($GLOBALS['param']['salefigureoptions_dispatchmode']) {
			$dispatchmode = new Html_Select("salefigure[dispatchmode]", array('--' => "--") + $GLOBALS['array_salefigure_dispatchmode'], $this->dispatchmode);
			$list += array(
				'dispatchmode' => array(
					'class' => "clearfix",
					'value' => $dispatchmode->item(__("dispatch mode")),
				),
			);
		}
		
		if ($GLOBALS['param']['salefigureoptions_dispatchcomment']) {
			$dispatchcomment = new Html_Textarea("salefigure[dispatchcomment]", $this->dispatchcomment);
			$dispatchcomment->properties['wrap'] = "virtual";
			$dispatchcomment->properties['rows'] = $GLOBALS['htmlconfig']['textarea_rows'];
			$dispatchcomment->properties['cols'] = $GLOBALS['htmlconfig']['textarea_cols'];
			$list += array(
				'dispatchcomment' => array(
					'class' => "clearfix",
					'value' => $dispatchcomment->item(__("dispatch comment")),
				),
			);
		}
		
		if ($GLOBALS['param']['salefigureoptions_paymentdate']) {
			$paymentdate = new Html_Input_Date("salefigure[paymentdate]", $this->paymentdate);
			$list += array(
				'paymentdate' => array(
					'class' => "clearfix",
					'value' => $paymentdate->item(__("payment date")),
				),
			);
		}

		if ($GLOBALS['param']['salefigureoptions_paymentmode']) {
			$paymentmode = new Html_Select("salefigure[paymentmode]", array('--' => "--") + $GLOBALS['array_salefigure_paymentmode'], $this->paymentmode);
			$list += array(
				'paymentmode' => array(
					'class' => "clearfix",
					'value' => $paymentmode->item(__("payment mode")),
				),
			);
		}

			if ($GLOBALS['param']['salefigureoptions_paymentcomment']) {
			$paymentcomment = new Html_Textarea("salefigure[paymentcomment]", $this->paymentcomment);
			$paymentcomment->properties['wrap'] = "virtual";
			$paymentcomment->properties['rows'] = $GLOBALS['htmlconfig']['textarea_rows'];
			$paymentcomment->properties['cols'] = $GLOBALS['htmlconfig']['textarea_cols'];
			$list += array(
				'paymentcomment' => array(
					'class' => "clearfix",
					'value' => $paymentcomment->item(__("payment comment")),
				),
			);
		}

		$save = new Html_Input_Save("return");
		$list += array(
			'save' => array(
				'class' => "itemsform-submit",
				'value' => $save->input(),
			),
		);

		if ($this->is_deletable()) {
			$delete = new Html_Input("return", $GLOBALS['txt_delete'], "submit");
			$delete->id = "return-delete";
			$delete->properties['class'] = "delete";
			$delete->properties['onclick'] = "return Check('".$GLOBALS['status_confirm']."')";

			$list += array(
				'delete' => array(
					'class' => "itemsform-submit",
					'value' => $delete->input(),
				),
			);
		}

		$items = new Html_List(array('leaves' => $list, 'class' => "itemsform"));
		$form .= $items->show();

		$form .= "</form>";

		return $form;
	}

	function alerts() {
		return array("", array());
	}

	function link($string = "") {
		return Html_Tag::a(link_content("content=followupsalefigure.php&salefigure_id=".$this->id), $string);
	}

	function link_to_edit($string = "") {
		$path = "content=salefigure.edit.php&salefigure_id=".$this->id;

		if ($this->project_id > 0) {
			$path .= "&project_id=".(int)$this->project_id;
		}

		return Html_Tag::a(link_content($path), $string, array('class' => "modal modal-reload"));
	}

	function project_currencies($project_currencies = null) {
		if (isset($project_currencies)) {
			$this->project_currencies = $project_currencies;
		}
		return $this->project_currencies;
	}

	function input_check() {
		$check = new Html_Checkbox("salefigure[".$this->id."][check]", 1, true);
		$invoice_id = new Html_Input("salefigure[".$this->id."][invoice_id]", $this->invoice_id);
		return $check->input().$invoice_id->input_hidden();
	}

	function input_project_id($projects = null) {
		$project = new Project($this->project_id);

		if ($this->invoice_id > 0) {
			$project_id = new Html_Input("salefigure[".$this->id."][project_id]", $this->project_id);
			return $project_id->input_hidden().$project->name_in_full();

		} else {
			if (!$projects or !$projects->is_selected($this->project_id) and $this->project_id > 0) {
				$projects = new Projects_Collector();
				$projects->projectstatus_max = $GLOBALS['param']['level_projectstatus'];
				$projects->id_forced = $this->project_id;
				$projects->select();
			}
			$project_id = new Html_Select_Multi("salefigure[".$this->id."][customer_id]", "salefigure[".$this->id."][project_id]", $projects->tree(), $project->customer_id(), $this->project_id);
			return $project_id->doublebox();
		}
	}
	
	function text_number() {
		if (empty($this->salefigure_number)) {
			return "<em>".__("no number")."</em>";
		} else {
			return $this->salefigure_number;
		}
	}

	function input_number() {
		$number = new Html_Input("salefigure[".$this->id."][salefigure_number]", $this->salefigure_number);
		$number->size = $GLOBALS['htmlconfig']['text_size4'];

		if ($this->invoice_id > 0) {
			return $number->input_hidden().Html_Tag::a(link_content("content=invoice.php&invoice_id=".$this->invoice_id), $this->salefigure_number);
		} else {
			return $number->input();
		}

	}
	
	function text_amount_vat_incl() {
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		return Format::currency_amount($this->project_currencies->convert($this->amount * (1 + $this->vat / 100)), $GLOBALS['param']['locale_lang'], true, $this->project_currencies->symbol());
	}

	function text_amount() {
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		return Format::currency_amount($this->project_currencies->convert($this->amount), $GLOBALS['param']['locale_lang'], true, $this->project_currencies->symbol());
	}

	function input_amount() {
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		$amount = new Html_Input("salefigure[".$this->id."][amount]", $this->project_currencies->convert($this->amount));
		$amount->properties['inside'] = "&nbsp;".$this->project_currencies->symbol();
		if (!is_numeric($this->id) or $this->id == 0) {
			$amount->properties['class'] = "row-clone";
		}
		$amount->size = $GLOBALS['htmlconfig']['text_size4'];

		if ($this->invoice_id > 0) {
			return $amount->input_hidden().Format::currency_amount($this->project_currencies->convert($this->amount), $GLOBALS['param']['locale_lang'], true, $this->project_currencies->symbol());
		} else {
			return $amount->input();
		}
	}

	function text_amount_paid() {
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		return Format::currency_amount($this->project_currencies->convert($this->amount_paid), $GLOBALS['param']['locale_lang'], true, $this->project_currencies->symbol());
	}
	
	function input_amount_paid() {
		if (!isset($this->project_currencies)) {
			$this->project_currencies = new Project_Currencies($this->project_id);
		}
		$amount_paid = new Html_Input("salefigure[".$this->id."][amount_paid]", $this->project_currencies->convert($this->amount_paid));
		$amount_paid->properties['inside'] = "&nbsp;".$this->project_currencies->symbol();
		$amount_paid->size = $GLOBALS['htmlconfig']['text_size4'];
		return $amount_paid->input();
	}

	function input_vat() {
		$vat = new Html_Input("salefigure[".$this->id."][vat]", $this->vat);
		$vat->size = $GLOBALS['htmlconfig']['text_size4'];
		return $vat->input();
	}
	
	function text_day() {
		if (!empty($this->day)) {
			return Format::date($this->day);
		} else {
			return "<em>".__("no date")."</em>";
		}
	}

	function input_day() {
		$date = null;
		if ($this->day > 0) {
			$date = $this->day;
		}

		$day = new Html_Input_Date("salefigure[".$this->id."][day]", $date);

		if ($this->invoice_id > 0) {
			return $day->input_hidden().Format::date($this->day);
		} else {
			return $day->input();
		}
	}

	function input_description() {
		$description = new Html_Input("salefigure[".$this->id."][description]", $this->description);
		$description->size = $GLOBALS['htmlconfig']['text_size2'];

		if ($this->invoice_id > 0) {
			return $description->input_hidden()."<span>".$this->description."</span>";
		} else {
			return $description->input();
		}
	}

	function text_contact() {
		$element = array();
		if (isset($this->contact_id) and $this->contact_id > 0) {
			$contact = new Contact($this->contact_id);
			$contact->load();
			$element = array(
				$this->contact_id => $contact->link_fullname(),
			);
		}
		return join(", ", $element);
	}

	function input_contact() {
		$element = array();
		if (isset($this->contact_id) and $this->contact_id > 0) {
			$contact = new Contact($this->contact_id);
			$contact->load();
			$element = array(
				$this->contact_id => $contact->link_fullname(),
			);
		}
		$field = new Html_Input_Ajax("salefigure[".$this->id."][contact_id]", link_content("content=contacts.ajax.php"), $element);
		$field->properties['size'] = $GLOBALS['htmlconfig']['text_size3'];
		$field->properties['class'] = "contact-autocomplete ajax-autocomplete";

		return $field->input();
	}

	function from_row($row) {
		$this->id = $row['id'];
		$this->salefigure_number = $row['salefigure_number'];
		$this->amount = $row['amount'];
		$this->amount_paid = $row['amount_paid'];
		$this->day = $row['day'];
		$this->project_id = $row['project_id'];
		$this->description = $row['description'];
		$this->user_id = $row['user_id'];
		$this->contact_id = $row['contact_id'];
		$this->vat = isset($row['vat']) ? $row['vat'] : 0;
		$this->time = $row['time'];
	}

	function match_existing($patterns = array("project_id"), $table = "salefigure", $db = null) {
		return parent::match_existing($patterns, $table, $db);
	}

	function load_options() {
		$options = new Salefigure_Options();
		$options->salefigure_id = $this->id;
		$options->select();
		foreach($options->select() as $option) {
			$this->salefigureoptions[$option->name] = $option->value;
		}
		return true;
	}

	function load_in_cascade($id = null) {
		if ($this->load($id)) {
			return $this->load_options();
		} else {
			return false;
		}
	}

	function load($id = null, $table = "salefigure", $columns = null) {
		return parent::load($id, $table, $columns);
	}

	function insert() {
		$result = $this->db->getID("
			INSERT INTO ".$this->db->config["table_salefigure"]."
			SET salefigure_number = " . $this->db->quote($this->salefigure_number).",
			amount = ".(float)$this->amount.",
			amount_paid  = ".(float)$this->amount_paid.",
			day = ".(int)$this->day.",
			project_id = ".(int)$this->project_id.",
			description = ".$this->db->quote($this->description).",
			user_id = ".(int)$this->user_id.",
			contact_id = ".(int)$this->contact_id.",
			invoice_id = ".(int)$this->invoice_id.",
			vat = ".to_float($this->vat).",
			time = ".time()
		);

		$this->id = $result[2];

		$this->db->status($result[1], "i", $GLOBALS['txt_salefigure']);

		return $this->id;
	}

	function update() {
		$result = $this->db->query("
			UPDATE ".$this->db->config["table_salefigure"]."
			SET salefigure_number = " . $this->db->quote($this->salefigure_number).",
			amount = ".(float)$this->amount.",
			amount_paid  = ".(float)$this->amount_paid.",
			day = ".(int)$this->day.",
			project_id = ".(int)$this->project_id.",
			description = ".$this->db->quote($this->description).",
			user_id = ".(int)$this->user_id.",
			contact_id = ".(int)$this->contact_id.",
			invoice_id = ".(int)$this->invoice_id.",
			vat = ".to_float($this->vat).",
			time = ".(int)$this->time."
			WHERE id = ".(int)$this->id
		);
		$this->db->status($result[1], "u", $GLOBALS['txt_salefigure']);

		return $this->id;
	}

	function delete() {
		if ($this->is_deletable()) {
			$result = $this->db->query("
				DELETE FROM ".$this->db->config['table_salefigure']." WHERE id = ".(int)$this->id
			);
			$this->db->status($result[1], "d", $GLOBALS['txt_salefigure']);
		}
	}

	function is_deletable() {
		return (bool)$this->id;
	}

	function is_insertable() {
		return (bool)(is_numeric($this->project_id) and $this->project_id > 0);
	}

	function is_updatable() {
		return $this->is_insertable() and (bool)(is_numeric($this->id) and $this->id > 0);
	}

	function save_options() {
		foreach ($this->salefigureoptions as $name => $value) {
			$option = new Salefigure_Option();
			$option->salefigure_id = $this->id;
			$option->name = $name;
			$option->value = $value;
			$option->save();
		}
	}

	function save_in_cascade() {
		$result = $this->save();
		$this->save_options();
		return $result;
	}

	function save() {
		if ($this->is_updatable()) {
			return $this->update();
		} else if ($this->is_insertable()) {
			return $this->insert();
		}
	}
}
