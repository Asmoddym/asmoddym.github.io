<?php
/*
	opentime
	$Author$
	$URL$
	$Revision$

	Copyright (C) No Parking 2001 - 2018
*/

class Project extends Record {
	public $id = 0;
	public $parent = 0;
	public $name = "";
	public $number = "";
	public $description = "";
	public $customer_id = 0;
	public $user_id = "";
	public $costproduction = 0.0;
	public $salefigure_real = 0.0;
	public $salefigure_previ = 0.0;
	public $salefigure_day = 0.0;
	public $salefigure_paid = 0.0;
	public $purchase_real = 0.0;
	public $purchase_previ = 0.0;
	public $profitability = 0.0;
	public $margin = 0.0;
	public $projectstatus_id = 0;
	public $start = 0;
	public $stop = 0;
	public $validation = 0;
	public $projectlink_id = 0;
	public $time_inserted = 0;
	public $time = 0;

	private $projectoptions = array();
	protected $customer;
	
	function __construct($id = 0, db $db = null) {
		parent::__construct($db);
		$this->id = $id;
	}

	function __get($name) {
		if (!isset($this->projectoptions[$name])) {
			$this->projectoptions[$name] = null;

			$options = new Project_Options();
			$options->project_id = $this->id;
			$options->select_columns("name", "value");
			foreach($options->select() as $option) {
				$this->projectoptions[$option->name] = $option->value;
			}
		}

		return $this->projectoptions[$name];
	}

	function __set($name, $value) {
		$this->projectoptions[$name] = $value;
	}
	
	function __isset($name) {
		return isset($this->projectoptions[$name]);
	}
	
	function customer($customer = null) {
		if ($customer) {
			$this->customer_id = $customer->id;
			$this->customer = $customer;
		}
		return $this->customer;
	}
	
	function as_array() {
		$elements = parent::as_array();
		if (!is_array($elements['user_id'])) {
			if (unserialize($elements['user_id'])) {
				$elements['user_id'] = unserialize($elements['user_id']);
			} else {
				$elements['user_id'] = array();
			}
		}
		return $elements;
	}
	
	function input_check() {
		if ($this->id > 0) {
			$check = new Html_Checkbox("project[".$this->id."][check]", 1, true);
			return $check->input();
		} else {
			return "";
		}
	}
	
	function validate_at($timestamp) {
		$result = $this->db->query("
			UPDATE ".$this->db->config['table_project']."
			SET validation = ".(int)$timestamp."
			WHERE id = ".(int)$this->id
		);
		$this->db->status($result[1], "u", $GLOBALS['txt_project']);
		$this->validation = $timestamp;
		return (bool)$result[1];
	}
	
	function is_parentable() {
		switch (true) {
			case $GLOBALS['param']['level_1_handling'] == 0:
			case $GLOBALS['param']['show_level_2'] == 0:
			case $this->id == 0:
			case $this->parent > 0:
				return false;
			default:
				return true;
		}
	}
	
	function move_as_child_of($project_id) {
		$this->load();
		$parent = Plugins::factory("Project");
		if ($parent->load($project_id)) {
			$this->parent = $parent->id;
			$this->customer_id = $parent->customer_id;
			return $this->save();
		}
		return false;
	}
	
	function apply_user_id_to_children() {
		$projects = new Projects();
		$projects->select(array('parent' => $this->id));
		foreach ($projects as $project) {
			$project->user_id = $this->user_id;
			$project->save();
		}
		return true;
	}

	function create_children($children) {
		if (is_array($children)) {
			foreach ($children as $child) {
				$project = new Project();
				$project->customer_id = $this->customer_id;
				$project->parent = $this->id;
				$project->name = $child;
				if ($project->match_existing(array("customer_id", "parent", "name"))) {
					$project->load();
				} else {
					$project->user_id = $this->user_id;
					$project->number = $this->number;
					$project->start = $this->start;
					$project->stop = $this->stop;
					$project->description = $this->description;
					$project->projectstatus_id = $this->projectstatus_id;
					$project->projectlink_id = $this->projectlink_id;
				}
				$project->save();
				
				$option = new Project_Option();
				$option->project_id = $this->id;
				$option->name = "responsible";
				if ($option->match_existing(array("project_id", "name"))) {
					$option->load();
					
					$option_project = new Project_Option();
					$option_project->project_id = $project->id;
					$option_project->name = "responsible";
					$option_project->value = $option->value;
					$option_project->save();
				}
			}
			return true;
		} else {
			return false;
		}
	}
	
	function actions() {
		if ($GLOBALS['param']['show_level_2']) {
			$actions['new_level_1'] = array(
				'class' => "action_strong",
				'value' => Html_Tag::a(link_content("content=project.php&project_id=no"), "<span>+</span> ".Format::label($GLOBALS['param']['level_1'])),
			);
			$parameters = "&project_id=no&child=true";
			if ($this->id > 0 and $this->parent == 0) {
				$parameters .= "&parent=".$this->id;
			}
			$actions['new_level_2'] = array(
				'class' => "action_strong",
				'value' => Html_Tag::a(link_content("content=project.php".$parameters), "<span>+</span> ".Format::label($GLOBALS['param']['level_2'])),
			);
			return $actions;
		} else {
			return array();
		}
	}

	function actions_for_accounts() {
		return array(
			'salefigure_new' => array(
				'class' => "action_strong",
				'value' => Html_Tag::a(link_content("content=salefigure.edit.php&salefigure_id=no&project_id=".$this->id), "<span>+</span> ".Format::label(__("salefigure")), array('class' => "modal modal-reload")),
			),
			'purchase_new' => array(
				'class' => "action_strong",
				'value' => Html_Tag::a(link_content("content=purchase.edit.php&purchase_id=no&project_id=".$this->id), "<span>+</span> ".Format::label(__("purchase")), array('class' => "modal modal-reload")),
			)
		);
	}
	
	function alerts() {
		$elements = array();
		
		if ($this->is_parentable()) {
			$children_possible = get_customer_parentprojects($this->customer_id);
			if (count($children_possible) > 0) {
				$operation = new Html_Input("operations", "create_children", "hidden");
				$id = new Html_Input("project[id]", $this->id, "hidden");
				$children = new Html_Select("project[children][]", $children_possible);
				$children->properties['multiple'] = "multiple";
				
				$html = "<form method=\"post\" action=\"\" name=\"form_create_children\" id=\"form_create_children\">";
				$html .= $operation->input().$id->input();
				$html .= "<a class=\"autosubmit\" href=\"#\">".__("Create %s", array($GLOBALS['param']['levels_2']))."</a> ".$children->selectbox();
				$html .= "</form>\n";
				
				$elements['create_children']['value'] = $html;
			}
			
			$operation = new Html_Button("operations", "apply_user_id", __("Apply assignement to %s", array($GLOBALS['param']['levels_2'])));
			$id = new Html_Input("project[id]", $this->id, "hidden");
			$html = "<form method=\"post\" action=\"\" name=\"form_apply_user_id\" id=\"form_apply_user_id\">";
			$html .= $id->input().$operation->button();
			$html .= "</form>\n";
			$elements['apply_user_id']['value'] = $html;

			$id = new Html_Input("project[id]", $this->id, "hidden");
			$parent = new Html_Input_Ajax("project[parent]", link_content("content=projects.ajax.php&userlimit=1&parent=0"));
			$operation = new Html_Button("operations", "move_as_child_of", __("Move"));
			$html = "<form method=\"post\" action=\"\" name=\"form_move_as_child_of\" id=\"form_move_as_child_of\">";
			$html .= __("Move as %s of %s", array($GLOBALS['param']['level_2'], $parent->input())).$id->input().$operation->button();
			$html .= "</form>\n";
			$elements['move_as_child_of']['value'] = $html;
		}
		
		return $elements;
	}

	function is_affected_to($user_id) {
		if ($this->is_archived()) {
			return false;
		}
		
		if (!is_array($this->user_id)) {
			$this->user_id = unserialize($this->user_id);
		}
		if (is_array($this->user_id) and in_array($user_id, $this->user_id)) {
			return true;
		}
		
		return false;
	}

	function is_archived() {
		return ($this->projectstatus_id >= $GLOBALS['param']['level_projectstatus']);
	}

	function is_deletable() {
		if ($this->is_parent()) {
			return false;
		}

		$hours = new Project_Finance_Hours($this->id);
		$hours->select();
		if (count($hours->gateway) > 0) {
			return false;
		}

		$contacts = new Project_Contacts($this->id);
		$contacts->select();
		if (count($contacts) > 0) {
			return false;
		}

		if ($GLOBALS['param']['ext_chargeplan']) {
			$workloads = new Workloads();
			$workloads->select(array(
				'project_id' => $this->id,
			));

			if (count($workloads->gateway) > 0) {
				return false;
			}
		}
		
		if ($this->id == 0) {
			return false;
		}

		return true;
	}
	
	function close() {
		$this->projectstatus_id = $GLOBALS['param']['level_projectstatus'];
		return $this->update();
	}
	
	function projectlink_name() {
		if ($this->projectlink_name === null) {
			$this->projectlink_name = $this->db->getValue("
				SELECT name
				FROM ".$this->db->config['table_projectlink']."
				WHERE id = ".(int)$this->projectlink_id
			);
		}

		return $this->projectlink_name;
	}

	function display() {
		if ($this->id > 0) {
			
			$items = new Html_List(array('leaves' => array(), 'class' => "itemsform"));
					
			$customer = new Customer($this->customer_id);
			$items->grid['leaves']['customer_id'] = array(
				'class' => "itemsform-head itemsform-bold clearfix",
				'value' => $items->item($GLOBALS['param']['level_0'], $customer->name()),
			);
			
			if ($this->parent > 0) {
				$parent = new Project($this->parent);
				$items->grid['leaves']['parent'] = array(
					'class' => "itemsform-head itemsform-bold clearfix",
					'value' => $items->item($GLOBALS['param']['level_1'], $parent->name()),
				);
				$items->grid['leaves']['project_id'] = array(
					'class' => "itemsform-head itemsform-bold clearfix",
					'value' => $items->item($GLOBALS['param']['level_2'], $this->name()),
				);
			} else {
				$items->grid['leaves']['project_id'] = array(
					'class' => "itemsform-head itemsform-bold clearfix",
					'value' => $items->item($GLOBALS['param']['level_1'], $this->name()),
				);
				
				if ($this->id > 0) {
					$children = new Projects_Collector();
					$children->parent = $this->id;
					$children->select();
					foreach ($children as $child) {
						$items->grid['leaves']['project_'.$child->id] = array(
							'class' => "itemsform-head itemsform-bold clearfix",
							'value' => $items->item($GLOBALS['param']['level_2'], $child->name()),
						);
					}
				}
			}
			
			$users_id = array();
			if (!is_array($this->user_id)) {
				$users_id = unserialize($this->user_id);
			}
			$users = new Users();
			if (is_array($users_id) and count($users_id) > 0) {
				$users->select(array('id' => $users_id));
			}
			$items->grid['leaves']['user_id'] = array(
				'class' => "itemsform-head itemsform-bold itemsform-head-bottom clearfix",
				'value' => $items->item($GLOBALS['param']['user'], join(", ", $users->names())),
			);
			
			if ($GLOBALS['param']['projectoptions_number']) {
				$items->grid['leaves']['number'] = array(
					'value' => $items->item($GLOBALS['param']['analyticalcode'], $this->number),
					'class' => "clearfix",
				);
			}
			
			if ($GLOBALS['param']['projectoptions_external']) {
				$items->grid['leaves']['projectoptions_external'] = array(
					'value' => $items->item($GLOBALS['txt_externalnumber'], $this->external),
					'class' => "clearfix",
				);
			}
			
			if ($GLOBALS['param']['projectoptions_orderdate']) {
				$items->grid['leaves']['projectoptions_orderdate'] = array(
					'value' => $items->item(__("order date"), Format::date($this->orderdate)),
					'class' => "clearfix",
				);
			}
			
			if ($GLOBALS['param']['projectoptions_ordernumber']) {
				$items->grid['leaves']['projectoptions_ordernumber'] = array(
					'value' => $items->item($GLOBALS['txt_ordernumber'], $this->ordernumber),
					'class' => "clearfix",
				);
			}
			
			if ($GLOBALS['param']['projectoptions_orderdescription']) {
				$items->grid['leaves']['projectoptions_orderdescription'] = array(
					'value' => $items->item($GLOBALS['txt_orderdescription'], $this->orderdescription),
					'class' => "clearfix",
				);
			}
			
			if (strlen($this->description) > 0 and strlen(utf8_htmlentities($this->description)) == 0) {
				$this->description = utf8_encode($this->description);
			}

			$items->grid['leaves']['description'] = array(
				'value' => $items->item($GLOBALS['txt_description'], nl2br($this->description)),
				'class' => "clearfix",
			);
			
			if ($GLOBALS['param']['projectoptions_responsible']) {
				$responsible = new User($this->responsible);
				$items->grid['leaves']['projectoptions_responsible'] = array(
					'value' => $items->item($GLOBALS['txt_responsible'], $responsible->name()),
					'class' => "clearfix",
				);
			}
			
			$projectstatus = new Project_Status($this->projectstatus_id);
			$items->grid['leaves']['projectstatus_id'] = array(
				'value' => $items->item($GLOBALS['txt_status'], $projectstatus->name()),
				'class' => "clearfix",
			);
	
			if ($GLOBALS['param']['ext_contacts']) {
				$contacts = new Project_Contacts($this->id);
				$contacts->set_order("lastname", "ASC");
				$contacts->select();
					
				$items->grid['leaves']['contacts'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_contacts'], join(", ", $contacts->links_fullname())),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_start']) {
				$items->grid['leaves']['start'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_startdate'], Format::date($this->start)),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_stop']) {
				$items->grid['leaves']['stop'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_enddate'], Format::date($this->stop)),
				);
			}
	
			if ($GLOBALS['param']['level_1_link']) {
				$link = new Project_Link($this->projectlink_id);
				$items->grid['leaves']['projectlink_id'] = array(
						'class' => "clearfix",
						'value' => $items->item($GLOBALS['param']['level_1_link'], $link->name()),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_currency']) {
				$currency = new Currency();
				$currency->load($this->currency);
				$items->grid['leaves']['projectoptions_currency'] = array(
					'class' => "clearfix",
					'value' => $items->item(__("currency"), ($currency->id > 0) ? $currency->name : $GLOBALS['param']['currency']),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_taxrefunded']) {
				$items->grid['leaves']['projectoptions_taxrefunded'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_taxrefunded'], (bool)$this->taxrefunded ? $GLOBALS['txt_yes'] : $GLOBALS['txt_no']),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_billable']) {
				$items->grid['leaves']['projectoptions_billable'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_billable'], (bool)$this->billable ? $GLOBALS['txt_yes'] : $GLOBALS['txt_no']),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_travel']) {
				$items->grid['leaves']['projectoptions_travel'] = array(
					'class' => "clearfix",
					'value' => $items->item(__("travel"), (bool)$this->travel ? $GLOBALS['txt_yes'] : $GLOBALS['txt_no']),
				);
			}
			
			if ($GLOBALS['param']['projectoptions_color']) {
				$items->grid['leaves']['projectoptions_color'] = array(
					'class' => "clearfix",
					'value' => $items->item($GLOBALS['txt_color'], $this->color),
				);
			}
			
	// 		if ($GLOBALS['param']['projectoptions_success']) {
	// 			$projectoptions_success = new Html_Select("project[options][success]", $GLOBALS['array_success'], $this->success);
	// 			$list['projectoptions_success'] = array(
	// 					'class' => "clearfix",
	// 					'value' => $projectoptions_success->item($GLOBALS['txt_success'], $GLOBALS['tip_use_success']),
	// 			);
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_clientsatisfaction']) {
	// 			$projectoptions_clientsatisfaction = new Html_Select("project[options][clientsatisfaction]", $GLOBALS['array_clientsatisfaction'], $this->clientsatisfaction);
	// 			$list['projectoptions_clientsatisfaction'] = array(
	// 					'class' => "clearfix",
	// 					'value' => $projectoptions_clientsatisfaction->item($GLOBALS['txt_clientsatisfaction'], $GLOBALS['tip_use_clientsatisfaction']),
	// 			);
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_difficulty']) {
	// 			$projectoptions_difficulty = new Html_Select("project[options][difficulty]", $GLOBALS['array_difficulty'], $this->difficulty);
	// 			$list['projectoptions_difficulty'] = array(
	// 					'class' => "clearfix",
	// 					'value' => $projectoptions_difficulty->item($GLOBALS['txt_difficulty'], $GLOBALS['tip_use_difficulty']),
	// 			);
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_priority']) {
	// 			$projectoptions_priority = new Html_Select("project[options][priority]", $GLOBALS['array_priority'], $this->priority);
	// 			$list['projectoptions_priority'] = array(
	// 					'class' => "clearfix",
	// 					'value' => $projectoptions_priority->item($GLOBALS['txt_priority'], $GLOBALS['tip_use_priority']),
	// 			);
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_textareas']) {
	// 			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_textareas']);
	// 			foreach ($projectoptionstextarea as $projectoption) {
	// 				$option = new Html_Textarea("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_text']) {
	// 			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_text']);
	// 			foreach ($projectoptionstextarea as $projectoption) {
	// 				$option = new Html_Input("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_date']) {
	// 			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_date']);
	// 			foreach ($projectoptionstextarea as $projectoption) {
	// 				$option = new Html_Input_Date("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_user']) {
	// 			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_user']);
	// 			$users = new Users();
	// 			$users->select();
	// 			$users_name = array('--' => "--") + $users->to_array_with_name();
	// 			foreach ($projectoptionstextarea as $projectoption) {
	// 				$option = new Html_Select("project[options][b64".base64_encode($projectoption)."]", $users_name, (int)$this->{$projectoption});
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
			if ($GLOBALS['param']['projectoptions_selects']) {
				$options = input_list_2_array($GLOBALS['param']['projectoptions_selects']);
				foreach ($options as $projectoption) {
					$option = new Project_List_Option((int)$this->{$projectoption});
					$items->grid['leaves']['projectoptions_'.$projectoption] = array(
						'class' => "clearfix",
						'value' => $items->item($projectoption, $option->name()),
					);
				}
			}
			
	// 		if ($GLOBALS['param']['projectoptions_selectsmulti']) {
	// 			$options = input_list_2_array($GLOBALS['param']['projectoptions_selectsmulti']);
	// 			foreach ($options as $projectoption) {
	// 				$list_options = new Project_List_Options($projectoption);
	// 				$list_options->select();
	// 				$names = array('--' => "--") + $list_options->to_array_with_names();
	// 				$array = array();
	// 				if ($this->{$projectoption} and is_string($this->{$projectoption})) {
	// 					$array = unserialize($this->{$projectoption});
	// 				}
	// 				$option = new Html_Select("project[options][multi_b64".trim(base64_encode($projectoption)."]", '='), $names, $array);
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item_multiplecombobox($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
	// 		if ($GLOBALS['param']['projectoptions_file']) {
	// 			$projectoptionsfile = input_list_2_array($GLOBALS['param']['projectoptions_file']);
	// 			foreach ($projectoptionsfile as $projectoption) {
	// 				$option = new Html_Input_File("project[options][file_b64".trim(base64_encode($projectoption)."]", '='), $this->{$projectoption});
	// 				$list['projectoptions_'.$projectoption] = array(
	// 						'class' => "clearfix",
	// 						'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
	// 				);
	// 			}
	// 		}
			
			return $items->show();
		} else {
			return "";
		}
	}
	
	function short() {
		$form = "<form method=\"post\" name=\"form_project\" id=\"form_project\" action=\"\" enctype=\"multipart/form-data\">";
		
		$id = new Html_Input("project[id]", $this->id, "hidden");
		$element = array();
		if ($this->customer_id > 0) {
			$customer = new Customer();
			$customer->load($this->customer_id);
			$element[$customer->id] = $customer->name;
		}
		$customer_id = new Html_Input_Ajax("project[customer_id]", link_content("content=customers.ajax.php&allow-new=true"), $element);
		$customer_id->properties['placeholder'] = Format::label($GLOBALS['param']['level_0']);
		$name = new Html_Input("project[name]", $this->name);
		$name->properties['placeholder'] = Format::label($GLOBALS['txt_name']);
		$save = new Html_Input_Save("return");

		$list = array(
			'customer_id' => array(
				'class' => "itemsform-short clearfix",
				'value' => $customer_id->input(),
			),
			'name' => array(
				'class' => "itemsform-short clearfix",
				'value' => $name->input(),
			),
			'save' => array(
				'class' => "itemsform-short clearfix",
				'value' => $save->input(),
			),
		);

		$form .= $id->input_hidden();
		$items = new Html_List(array('leaves' => $list, 'class' => "itemsform"));
		$form .= $items->show();
		
		$form .= "</form>";
		
		return $form;
	}
	
	function list_with_inputs() {
		$list = array();
		
		$users = new Users();
		$users->select();
		$users_name = $users->to_array_with_name();
		
		$user_id = new Html_Select("user_id", $users_name, unserialize($this->user_id));
		$list['user_id'] = array(
			'class' => "itemsform-head itemsform-head-bottom clearfix",
			'value' => $user_id->item_multiplecombobox($GLOBALS['param']['user'].$user_id->pickable(), "", $user_id->picker($users->groups())),
		);
		
		if ($GLOBALS['param']['projectoptions_number']) {
			$number = new Html_Input("number", $this->number);
			$number->properties['tip'] = true;
			$number->size = $GLOBALS['htmlconfig']['text_size4'];
		
			$list['number'] = array(
				'value' => $number->item($GLOBALS['param']['analyticalcode'], __("Add new analytical code")),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['projectoptions_external']) {
			$projectoptions_external = new Html_Input("project[options][external]", $this->external);
			$list['projectoptions_external'] = array(
				'value' => $projectoptions_external->item($GLOBALS['txt_externalnumber'], __("Add new %s", array($GLOBALS['txt_externalnumber']))),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['projectoptions_orderdate']) {
			$projectoptions_orderdate = new Html_Input_Date("project[options][orderdate]", $this->orderdate);
			$list['projectoptions_orderdate'] = array(
				'value' => $projectoptions_orderdate->item(__("order date"), __("Add new %s", array(__("order date")))),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['projectoptions_ordernumber']) {
			$projectoptions_ordernumber = new Html_Input("project[options][ordernumber]", $this->ordernumber);
			$list['projectoptions_ordernumber'] = array(
				'value' => $projectoptions_ordernumber->item($GLOBALS['txt_ordernumber'], __("Add new %s", array($GLOBALS['txt_ordernumber']))),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['projectoptions_orderdescription']) {
			$projectoptions_orderdescription = new Html_Textarea("project[options][orderdescription]", $this->orderdescription);
			$list['projectoptions_orderdescription'] = array(
				'value' => $projectoptions_orderdescription->item($GLOBALS['txt_orderdescription'], __("Add new %s", array($GLOBALS['txt_orderdescription']))),
				'class' => "clearfix",
			);
		}
		
		if (strlen($this->description) > 0 and strlen(utf8_htmlentities($this->description)) == 0) {
			$this->description = utf8_encode($this->description);
		}
		$description = new Html_Textarea("description", utf8_htmlentities($this->description));
		$description->properties = array(
			'wrap' => "virtual",
			'rows' => $GLOBALS['htmlconfig']['textarea_rows'],
			'cols' => $GLOBALS['htmlconfig']['textarea_cols'],
		);
		$list['description'] = array(
			'class' => "clearfix",
			'value' => $description->item($GLOBALS['txt_description'], __("Add new description")),
		);
		
		if ($GLOBALS['param']['projectoptions_responsible']) {
			$responsible = new Html_Select("project[options][responsible]", array('--' => "--") + $users_name, $this->responsible);
			$list['projectoptions_responsible'] = array(
				'value' => $responsible->item($GLOBALS['txt_responsible'], __("Add new responsible")),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['projectoptions_validation']) {
			$validation = new Html_Input_Date("project[validation]", ($this->validation > 0) ? $this->validation : "");
			$list['validation'] = array(
				'value' => $validation->item(__("Validation date"), __("Add new validation date")),
				'class' => "clearfix",
			);
		}
		
		if (preg_match("/a/", $_SESSION['useraccess'])) {
			if (preg_match("/aa/", $_SESSION['useraccess'])) {
				$statuses = new Project_Statuses();
				$statuses->select();
				$statuses_name = array('--' => "--") + $statuses->to_array_with_name("id");
			} else {
				$statuses_name = array();
				$query_projectstatus = "SELECT ".$this->db->config['table_projectstatus'].".id as id, ".
					$this->db->config['table_projectstatus'].".name as name".
					" FROM ".$this->db->config['table_projectstatus'].
					" WHERE ".$this->db->config['table_projectstatus'].".id >= '".$this->projectstatus_id."'";
				$result_projectstatus = $this->db->query($query_projectstatus);
				if ($this->projectstatus_id <= 1) {
					$statuses_name['--'] = "--";
				}
				while ($row_projectstatus = $this->db->fetchArray($result_projectstatus[0])) {
					$statuses_name[$row_projectstatus['id']] = $row_projectstatus['name'];
				}
			}
			$projectstatus_id = new Html_Select("projectstatus_id", $statuses_name, $this->projectstatus_id);
			$list['projectstatus_id'] = array(
				'class' => "clearfix",
				'value' => $projectstatus_id->item($GLOBALS['txt_status'], __("Add new status")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_dealstatus']) {
			$projectoptions_dealstatus = new Html_Select("project[options][dealstatus]", array('--' => "--") + $GLOBALS['array_project_dealstatus'], $this->dealstatus);
			$list['projectoptions_dealstatus'] = array(
				'value' => $projectoptions_dealstatus->item(__("deal status"), __("Add new %s", array(__("deal status")))),
				'class' => "clearfix",
			);
		}
		
		if ($GLOBALS['param']['ext_contacts']) {
			$contacts = new Project_Contacts($this->id);
			$contacts->set_order("lastname", "ASC");
			$contacts->select();
				
			$contact_id = new Html_Select_Ajax("contact_id", link_content("content=contacts.ajax.php"), $contacts->links_fullname());
			$list['customercontacts'] = array(
				'class' => "clearfix",
				'value' => $contact_id->item($GLOBALS['txt_contacts'], __("Add new contact")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_start']) {
			$start = new Html_Input_Date("start", $this->start);
			$list['start'] = array(
				'class' => "clearfix",
				'value' => $start->item($GLOBALS['txt_startdate'], __("Add new start date")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_stop']) {
			$stop = new Html_Input_Date("stop", $this->stop);
			$list['stop'] = array(
				'class' => "clearfix",
				'value' => $stop->item($GLOBALS['txt_enddate'], __("Add new end date")),
			);
		}
		
		if ($GLOBALS['param']['level_1_link']) {
			$links = new Project_Links();
			$links->select();
			$links_name = array('--' => "--") + $links->to_array_with_name();
			$projectlink_id = new Html_Select("projectlink_id", $links_name, $this->projectlink_id);
			$list['projectlink_id'] = array(
				'class' => "clearfix",
				'value' => $projectlink_id->item($GLOBALS['param']['level_1_link'], __("Add new %s", array($GLOBALS['param']['level_1_link']))),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_currency']) {
			$currencies = new Currencies();
			$currencies->set_order("name", "ASC");
			$currencies->select();
			$projectoptions_currency = new Html_Select("project[options][currency]", array('--' => "--") + $currencies->names(), $this->currency);
			$list['projectoptions_currency'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_currency->item(__("currency"), __("Choose currency")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_taxrefunded']) {
			$projectoptions_taxrefunded = new Html_Checkbox("project[options][taxrefunded]", "1", (bool)$this->taxrefunded);
			$list['projectoptions_taxrefunded'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_taxrefunded->item($GLOBALS['txt_taxrefunded'], __("Mark as tax refundable")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_taxrefundfiles']) {
			$projectoptionstaxrefundfiles = input_list_2_array($GLOBALS['param']['projectoptions_taxrefundfiles']);
			foreach ($projectoptionstaxrefundfiles as $projectoption) {
				$option = new Html_Input_File("project[options][file_b64".trim(base64_encode($projectoption)."]", '='), $this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_billable']) {
			$projectoptions_billable = new Html_Checkbox("project[options][billable]", "1", (bool)$this->billable);
			$list['projectoptions_billable'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_billable->item($GLOBALS['txt_billable'], __("Mark as billable")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_marginrate']) {
			$projectoptions_marginrate = new Html_Input("project[options][marginrate]", (float)$this->marginrate);
			$list['projectoptions_marginrate'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_marginrate->item(__("margin rate"), __("Set the margin rate")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_travel']) {
			$projectoptions_travel = new Html_Checkbox("project[options][travel]", "1", (bool)$this->travel);
			$list['projectoptions_travel'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_travel->item(__("travel"), __("Mark as travel")),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_color']) {
			$projectoption_color = new Html_Input_Color("project[options][color]", $this->color);
			$list['projectoptions_color'] = array(
				'class' => "clearfix colored",
				'style' => "background-color : #".$this->color.";",
				'value' => $projectoption_color->item($GLOBALS['txt_color'], $GLOBALS['tip_use_color']),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_success']) {
			$projectoptions_success = new Html_Select("project[options][success]", $GLOBALS['array_success'], $this->success);
			$list['projectoptions_success'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_success->item($GLOBALS['txt_success'], $GLOBALS['tip_use_success']),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_clientsatisfaction']) {
			$projectoptions_clientsatisfaction = new Html_Select("project[options][clientsatisfaction]", $GLOBALS['array_clientsatisfaction'], $this->clientsatisfaction);
			$list['projectoptions_clientsatisfaction'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_clientsatisfaction->item($GLOBALS['txt_clientsatisfaction'], $GLOBALS['tip_use_clientsatisfaction']),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_difficulty']) {
			$projectoptions_difficulty = new Html_Select("project[options][difficulty]", $GLOBALS['array_difficulty'], $this->difficulty);
			$list['projectoptions_difficulty'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_difficulty->item($GLOBALS['txt_difficulty'], $GLOBALS['tip_use_difficulty']),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_priority']) {
			$projectoptions_priority = new Html_Select("project[options][priority]", $GLOBALS['array_priority'], $this->priority);
			$list['projectoptions_priority'] = array(
				'class' => "clearfix",
				'value' => $projectoptions_priority->item($GLOBALS['txt_priority'], $GLOBALS['tip_use_priority']),
			);
		}
		
		if ($GLOBALS['param']['projectoptions_textareas']) {
			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_textareas']);
			foreach ($projectoptionstextarea as $projectoption) {
				$option = new Html_Textarea("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_text']) {
			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_text']);
			foreach ($projectoptionstextarea as $projectoption) {
				$option = new Html_Input("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_date']) {
			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_date']);
			foreach ($projectoptionstextarea as $projectoption) {
				$option = new Html_Input_Date("project[options][b64".base64_encode($projectoption)."]", $this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_user']) {
			$projectoptionstextarea = input_list_2_array($GLOBALS['param']['projectoptions_user']);
			$users = new Users();
			$users->select();
			$users_name = array('--' => "--") + $users->to_array_with_name();
			foreach ($projectoptionstextarea as $projectoption) {
				$option = new Html_Select("project[options][b64".base64_encode($projectoption)."]", $users_name, (int)$this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_selects']) {
			$options = input_list_2_array($GLOBALS['param']['projectoptions_selects']);
			foreach ($options as $projectoption) {
				$list_options = new Project_List_Options($projectoption);
				$list_options->select();
				$names = array('--' => "--") + $list_options->to_array_with_names();
				$option = new Html_Select("project[options][b64".base64_encode($projectoption)."]", $names, (int)$this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_selectsmulti']) {
			$options = input_list_2_array($GLOBALS['param']['projectoptions_selectsmulti']);
			foreach ($options as $projectoption) {
				$list_options = new Project_List_Options($projectoption);
				$list_options->select();
				$names = array('--' => "--") + $list_options->to_array_with_names();
				$array = array();
				if ($this->{$projectoption} and is_string($this->{$projectoption})) {
					$array = unserialize($this->{$projectoption});
				}
				$option = new Html_Select("project[options][multi_b64".trim(base64_encode($projectoption)."]", '='), $names, $array);
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item_multiplecombobox($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_file']) {
			$projectoptionsfile = input_list_2_array($GLOBALS['param']['projectoptions_file']);
			foreach ($projectoptionsfile as $projectoption) {
				$option = new Html_Input_File("project[options][file_b64".trim(base64_encode($projectoption)."]", '='), $this->{$projectoption});
				$list['projectoptions_'.$projectoption] = array(
					'class' => "clearfix",
					'value' => $option->item($projectoption, __("Add new %s", array($projectoption))),
				);
			}
		}
		
		if ($GLOBALS['param']['projectoptions_eotp']) {
			$eotp_options = new Project_Options_Dated();
			$eotp_options->project_id = $this->id;
			$eotp_options->name = "eotp";
			$eotp_options->set_order("day", "DESC");
			$eotp_options->select();
		
			$elements = array(
				0 => array(
					'name' => "eotp",
					'value' => "",
					'day' => 0,
				),
			);
			foreach ($eotp_options as $option) {
				$elements[$option->id] = array(
					'name' => $option->name,
					'value' => $option->value,
					'day' => $option->day,
				);
			}
		
			$option = new Html_Input_Dated("project[optionsdated][eotp]", $elements);
		
			$list['projectoptions_eotp'] = array(
				'class' => "clearfix",
				'value' => $option->item("EOTP", __("Add new %s", array("EOTP"))),
			);
		}
		
		foreach (Plugins::call_hook("project_options_display", $this) as $inputs) {
			foreach ($inputs as $option => $input) {
				$list[$option] = $input;
			}
		}
		
		$save = new Html_Input_Save("return");
		$list['save'] = array(
			'class' => "itemsform-submit",
			'value' => $save->input(),
		);
		
		if ($this->is_deletable()) {
			$delete = new Html_Input("return", $GLOBALS['txt_delete'], "submit");
			$delete->id = "return-delete";
			$delete->properties['class'] = "delete";
			$delete->properties['onclick'] = "return Check('".$GLOBALS['status_confirm']."')";
		
			$list['delete'] = array(
				'class' => "itemsform-submit",
				'value' => $delete->input(),
			);
		}
		
		return $list;
	}
	
	function list_with_inputs_parent($useraccess = NULL) {
		if ($useraccess === NULL) {
			$useraccess = $_SESSION['useraccess'];
		}
		
		$list = array();
		
		$customers = new Customers();
		$customers->user_id = $_SESSION['userid'];
		$customers->user_access = $useraccess;
		$customers->customerstatus_max = $GLOBALS['param']['level_projectstatus'];
		$customers->id_forced = $this->customer_id;
		$customers->select();
		$customers_name = array('--' => "--") + $customers->to_array_with_name();
		$customer_id = new Html_Select("customer_id", $customers_name, (int)$this->customer_id);
	
		$list['customer_id'] = array(
			'class' => "itemsform-head itemsform-bold clearfix",
			'value' => $customer_id->item($GLOBALS['param']['level_0']),
		);
		
		$name = new Html_Input("name", $this->name);
		$name->properties['tip'] = true;
		$name->properties['size'] = $GLOBALS['htmlconfig']['text_size1'];
		
		$list['name'] = array(
			'class' => "itemsform-head itemsform-bold clearfix",
			'value' => $name->item($GLOBALS['txt_name']),
		);
		
		if ($GLOBALS['param']['show_level_2'] and $this->id and !$this->parent) {
			$project_child = show_project_child($this->id);
			if ($project_child) {
				$list['levels_2'] = array(
					'class' => "itemsform-head clearfix",
					'value' => "<label for=\"levels_2\">".$GLOBALS['param']['levels_2']."</label>".$project_child,
				);
			}
		}
		
		return $list;
	}
	
	function list_with_inputs_child($useraccess = NULL) {
		if ($useraccess === NULL) {
			$useraccess = $_SESSION['useraccess'];
		}
		
		$list = array();
		
		if ($GLOBALS['param']['layout_projectmenu'] == "doubleselect") {
			$projects = new Projects_Collector();
			$projects->user_id = $GLOBALS['_SESSION']['userid'];
			$projects->user_access = $useraccess;
			$projects->projectstatus_max = $GLOBALS['param']['level_projectstatus'];
			$projects->parent = 0;
			$projects->{'!id'} = $this->id;
			$projects->select();
			if ($this->parent > 0) {
				$projects[] = new Project($this->parent);
			}
	
			$properties = array(
				'customers' => true,
				'customerstatus_max' => $GLOBALS['param']['level_projectstatus'],
				'id_forced' => (int)$this->customer_id,
			);
			$customer_id = new Html_Select_Multi("customer_id", "parent", $projects->tree($properties), (int)$this->customer_id, (int)$this->parent);
			$customer_id->properties['tip'] = true;
	
			$list['customer_id'] = array(
				'class' => "itemsform-head itemsform-bold clearfix",
				'value' => $customer_id->item($GLOBALS['param']['level_0']." / ".$GLOBALS['param']['level_1']),
			);
		} else {
			$customers = new Customers();
			$customers->user_id = $GLOBALS['_SESSION']['userid'];
			$customers->user_access = $useraccess;
			$customers->customerstatus_max = $GLOBALS['param']['level_projectstatus'];
			$customers->id_forced = $this->customer_id;
			$customers->select();
			$customer_id = new Html_Select("customer_id", $customers->to_array_with_name(), $this->customer_id);
			$list['customer_id'] = array(
				'class' => "itemsform-head itemsform-bold clearfix",
				'value' => $customer_id->item($GLOBALS['param']['level_0']),
			);
	
			$parent_ajax = new Html_Input("parent_ajax", $this->parent_name());
			$parent_ajax->properties = array(
				'class' => "project-autocomplete ajax-autocomplete project-autocomplete-fullname",
				'autocomplete' => "off",
			);
			$parent = new Html_Input("parent", $this->parent, "hidden");
			$list['parent'] = array(
				'class' => "itemsform-head itemsform-bold clearfix",
				'value' => $parent_ajax->item(Html_Tag::a(link_content("content=project.php&project_id=".$this->parent), Format::label($GLOBALS['param']['level_1']).$parent->input())),
			);
		}
		
		$name = new Html_Input("name", $this->name);
		$name->properties['tip'] = true;
		$name->properties['size'] = $GLOBALS['htmlconfig']['text_size1'];
		
		$list['name'] = array(
			'class' => "itemsform-head itemsform-bold clearfix",
			'value' => $name->item($GLOBALS['txt_name']),
		);
		
		return $list;
	}

	function form($useraccess = null, $child = null) {
		if ($useraccess === null) {
			$useraccess = $_SESSION['useraccess'];
		}
		$users = new Users();
		$users->select();
		$users_name = $users->to_array_with_name();

		$form = "<form method=\"post\" name=\"form_project\" id=\"form_project\" action=\"\" enctype=\"multipart/form-data\">";
		$form .= "<input type=\"hidden\" name=\"id\" value=\"".$this->id."\" />";

		if ($this->id > 0) {
			$form .= "<input type=\"hidden\" name=\"action\" value=\"do_edit\" />";
		} else {
			$form .= "<input type=\"hidden\" name=\"action\" value=\"insert\" />";
		}

		switch (true) {
			case !$GLOBALS['param']['show_level_2']:
				$list = $this->list_with_inputs_parent();
				break;
			case (int)$this->id > 0 and $this->parent > 0:
			case (int)$this->id == 0 and $child === true:
				$list = $this->list_with_inputs_child();
				break;
			default:
				$list = $this->list_with_inputs_parent();
				break;
		}
		$list += $this->list_with_inputs();

		$items = new Html_List(array('leaves' => $list, 'class' => "itemsform"));
		$form .= $items->show();
		
		$form .= "</form>";

		return $form;
	}

	function load($id = null, $table = "project", $columns = null) {
		return parent::load($id, $table, $columns);
	}

	function salefigure_previ($amount = null) {
		if ($amount !== null) {
			$this->salefigure_previ = $amount;
			$this->db->query("
				UPDATE ".$this->db->config['table_project']."
				SET salefigure_previ = ".(float)$this->salefigure_previ."
				WHERE id = ".(int)$this->id
			);
		}

		if ($this->salefigure_previ == 0) {
			$this->salefigure_previ = $this->db->getValue("
				SELECT salefigure_previ
				FROM ".$this->db->config['table_project']."
				WHERE id = ".(int)$this->id."
				LIMIT 0, 1");
		}

		return $this->salefigure_previ;
	}

	function clean($post) {
		$cleaned = array();
		
		if (isset($post['id'])) {
			$cleaned['id'] = (int)$post['id'];
		}
		if (isset($post['customer_id'])) {
			$cleaned['customer_id'] = (int)$post['customer_id'];
		}
		if (isset($post['parent'])) {
			$cleaned['parent'] = (int)$post['parent'];
		}
		if (isset($post['name'])) {
			$cleaned['name'] = trim(strip_tags($post['name']));
		}
		if (isset($post['user_id'])) {
			$cleaned['user_id'] = serialize(clean_array_from_multiplecombobox($post['user_id']));
		}
		if (isset($post['projectlink_id'])) {
			$cleaned['projectlink_id'] = (int)$post['projectlink_id'];
		}
		if (isset($post['projectstatus_id'])) {
			$cleaned['projectstatus_id'] = (int)$post['projectstatus_id'];
		}
		if (isset($post['number'])) {
			$cleaned['number'] = trim(strip_tags($post['number']));
		}
		if (isset($post['start']) and is_array($post['start'])) {
			$cleaned['start'] = prepare_mktime(0, 0, 0, (int)$post['start']['m'], (int)$post['start']['d'], (int)$post['start']['Y']);
		}
		if (isset($post['stop']) and is_array($post['stop'])) {
			$cleaned['stop'] = prepare_mktime(0, 0, 0, (int)$post['stop']['m'], (int)$post['stop']['d'], (int)$post['stop']['Y']);
			if (isset($cleaned['start']) and $cleaned['start'] > 0) {
				$cleaned['stop'] = max($cleaned['stop'], $cleaned['start']);
			}
		}
		if (isset($post['validation']) and is_array($post['validation'])) {
			$cleaned['validation'] = prepare_mktime(0, 0, 0, (int)$post['validation']['m'], (int)$post['validation']['d'], (int)$post['validation']['Y']);
		}
		if (isset($post['salefigure_previ'])) {
			$cleaned['salefigure_previ'] = to_float($post['salefigure_previ']);
		}
		if (isset($post['purchase_previ'])) {
			$cleaned['purchase_previ'] = to_float($post['purchase_previ']);
		}
		if (isset($post['description'])) {
			$cleaned['description'] = trim(strip_tags($post['description']));
		}
		
		return $cleaned;
	}

	function save() {
		if (is_numeric($this->id) and $this->id > 0) {
			$this->id = $this->update();
		} else {
			$this->id = $this->insert();
		}

		return $this->id;
	}

	function update_children() {
		$this->db->query("
			UPDATE ".$this->db->config['table_project']."
			SET customer_id = ".(int)$this->customer_id."
			WHERE parent = ".$this->id
		);

		if ($this->projectstatus_id >= 3) {
			$this->db->query("
				UPDATE ".$this->db->config['table_project']."
				SET projectstatus_id = ".(int)$this->projectstatus_id."
				WHERE parent = ".(int)$this->id
			);
		}
	}

	function replace() {
		if ($this->customer_id > 0 and !empty($this->name)) {
			$user_id = serialize_cleanly($this->user_id);

			$result = $this->db->query("
				REPLACE ".$this->db->config['table_project']."
				SET id = ".(int)$this->id.",
				name = ".$this->db->quote($this->name).",
				parent = ".(int)$this->parent.",
				projectlink_id = ".(int)$this->projectlink_id.",
				projectstatus_id = ".(int)$this->projectstatus_id.",
				number = ".$this->db->quote((string)$this->number).",
				customer_id = ".(int)$this->customer_id.",
				start = ".(int)$this->start.",
				stop = ".(int)$this->stop.",
				validation = ".(int)$this->validation.",
				salefigure_previ = ".(float)$this->salefigure_previ.",
				purchase_previ = ".(float)$this->purchase_previ.",
				user_id = ".$this->db->quote($user_id).",
				description = ".$this->db->quote((string)$this->description)
			);
			$this->db->status($result[1], "u", $GLOBALS['txt_project']);
			return true;
		} else {
			$this->db->status(-2, "u", $GLOBALS['txt_project']);
			return false;
		}
	}

	function update() {
		if ($this->customer_id > 0 and !empty($this->name)) {
			$user_id = serialize_cleanly($this->user_id);

			$result = $this->db->query("
				UPDATE ".$this->db->config['table_project']."
				SET name = ".$this->db->quote($this->name).",
				parent = ".(int)$this->parent.",
				projectlink_id = ".(int)$this->projectlink_id.",
				projectstatus_id = ".(int)$this->projectstatus_id.",
				number = ".$this->db->quote((string)$this->number).",
				customer_id = ".(int)$this->customer_id.",
				start = ".(int)$this->start.",
				stop = ".(int)$this->stop.",
				validation = ".(int)$this->validation.",
				salefigure_previ = ".(float)$this->salefigure_previ.",
				purchase_previ = ".(float)$this->purchase_previ.",
				user_id = ".$this->db->quote($user_id).",
				description = ".$this->db->quote((string)$this->description).",
				time = ".time()."
				WHERE id = ".(int)$this->id
			);
			$this->db->status($result[1], "u", $GLOBALS['txt_project']);
		} else {
			$this->db->status(-2, "u", $GLOBALS['txt_project']);
		}

		return $this->id;
	}

	function insert() {
		if ($this->customer_id > 0 and !empty($this->name)) {
			$user_id = serialize_cleanly($this->user_id);

			$result = $this->db->getID("
				INSERT INTO ".$this->db->config['table_project']."
				SET name = ".$this->db->quote($this->name).",
				parent = ".(int)$this->parent.",
				projectlink_id = ".(int)$this->projectlink_id.",
				projectstatus_id = ".(int)$this->projectstatus_id.",
				number = ".$this->db->quote((string)$this->number).",
				description = ".$this->db->quote((string)$this->description).",
				start = ".(int)$this->start.",
				stop = ".(int)$this->stop.",
				validation = ".(int)$this->validation.",
				salefigure_previ = ".(float)$this->salefigure_previ.",
				purchase_previ = ".(float)$this->purchase_previ.",
				user_id = ".$this->db->quote($user_id).",
				customer_id = ".(int)$this->customer_id.",
				time = ".time().",
				time_inserted = ".time()
			);
			$this->id = $result[2];
			if (isset($GLOBALS['txt_project'])) {
				$this->db->status($result[1], "i", $GLOBALS['txt_project']);
			}
		} else {
			$this->db->status(-2, "i", $GLOBALS['txt_project']);
		}

		return $this->id;
	}

	function delete() {
		$result = $this->db->query("
			DELETE FROM ".$this->db->config['table_project']."
			WHERE id = ".(int)$this->id
		);
		$this->db->status($result[1], "d", $GLOBALS['param']['level_1']);
		return (bool)($result[1] == 1);
	}

	function is_parent() {
		if ($this->id > 0) {
			return $this->db->getVerif("
				SELECT id FROM ".$this->db->config['table_project'].
				" WHERE parent = ".(int)$this->id
			);
		} else {
			return false;
		}
	}

	function is_using_rateproject() {
		$project_id = $this->children();
		$project_id[] = $this->id;

		return $this->db->getVerif("
			SELECT id
			FROM ".$this->db->config['table_rateproject']."
			WHERE project_id IN ".array_2_list($project_id)
		);
	}
	
	function is_active_with_hour_among_children() {
		return $this->db->getVerif("
			SELECT ".$this->db->config['table_hour'].".id
			FROM ".$this->db->config['table_hour']."
			INNER JOIN ".$this->db->config['table_project']."
			ON ".$this->db->config['table_project'].".id = ".$this->db->config['table_hour'].".project_id
			WHERE ".$this->db->config['table_project'].".id = ".(int)$this->id."
			OR ".$this->db->config['table_project'].".parent = ".(int)$this->id."
			LIMIT 0, 1"
		);
	}

	function is_active_with_expense_among_children() {
		return $this->db->getVerif("
			SELECT ".$this->db->config['table_expense'].".id
			FROM ".$this->db->config['table_expense']."
			INNER JOIN ".$this->db->config['table_project']."
			ON ".$this->db->config['table_project'].".id = ".$this->db->config['table_expense'].".project_id
			WHERE ".$this->db->config['table_project'].".id = ".(int)$this->id."
			OR ".$this->db->config['table_project'].".parent = ".(int)$this->id."
			LIMIT 0, 1"
		);
	}

	function match_existing($patterns = array("name"), $table = "project", $db = null) {
		return parent::match_existing($patterns, $table, $db);
	}

	function parent_name() {
		if ($this->parent == 0) {
			return false;
		} else {
			$parent = new Project();
			$parent->load($this->parent);
			$this->parent_name = $parent->name;

			return $this->parent_name;
		}
	}

	function children() {
		$children = array();

		$query = "SELECT ".$this->db->config['table_project'].".id as project_id".
		" FROM ".$this->db->config['table_project'].
		" WHERE ".$this->db->config['table_project'].".parent = '".$this->id."'";

		$result = $this->db->query($query);

		while ($row = $this->db->fetchArray($result[0])) {
			$children[] = $row['project_id'];
		}

		return $children;
	}

	function customer_id() {

		$query = "SELECT customer_id".
		" FROM ".$this->db->config['table_project'].
		" WHERE id = ".(int)$this->id.
		" LIMIT 0, 1";

		return $this->db->getValue($query);
	}

	function number() {
		if (empty($this->number)) {
			$query = "SELECT number".
			" FROM ".$this->db->config['table_project'].
			" WHERE id = ".(int)$this->id.
			" LIMIT 0, 1";
			$this->number = $this->db->getValue($query);
		}
		return $this->number;
	}

	function user_id() {
		if (empty($this->user_id)) {
			$query = "SELECT user_id".
			" FROM ".$this->db->config['table_project'].
			" WHERE id = ".(int)$this->id.
			" LIMIT 0, 1";
			$this->user_id = $this->db->getValue($query);
		}
		return $this->user_id;
	}
	
	function user_ids_active_and_affected() {
		if (!is_array($this->user_id)) {
			$user_ids = unserialize($this->user_id);
			if (!is_array($user_ids)) {
				$user_ids = array();
			}
		} else {
			$user_ids = $this->user_id;
		}

		list($result, ) = $this->db->query("
			SELECT DISTINCT user_id
			FROM hour
			WHERE project_id = ".(int)$this->id."
			GROUP BY user_id"
		);
		while ($row = $this->db->fetchArray($result)) {
			$user_ids[] = $row['user_id'];
		}

		$user_ids = array_unique($user_ids);
		sort($user_ids);

		return $user_ids;
	}

	function name() {
		if (empty($this->name)) {
			$query = "SELECT name".
			" FROM ".$this->db->config['table_project'].
			" WHERE id = ".(int)$this->id.
			" LIMIT 0, 1";
			$this->name = $this->db->getValue($query);
		}

		return $this->name;
	}
	
	function name_with_parent() {
		return $this->db->getValue("
			SELECT IF(".
			$this->db->config['table_project'].".parent != 0, ".
			" CONCAT(project2.name, \" -- \", ".$this->db->config['table_project'].".name), ".
			" CONCAT(".$this->db->config['table_project'].".name)) as name
			FROM ".$this->db->config['table_project']."
			LEFT JOIN ".$this->db->config['table_project']." as project2
			ON project2.id = ".$this->db->config['table_project'].".parent
			WHERE ".$this->db->config['table_project'].".id = ".(int)$this->id."
			LIMIT 0,1"
		);
	}

	function name_in_full() {
		return $this->fullname();
	}
	
	function fullname() {
		$query = "SELECT IF(".
		$this->db->config['table_project'].".parent != 0, ".
		" CONCAT(CONCAT(".$this->db->config['table_customer'].".name, \" - \", project2.name), \" -- \", ".$this->db->config['table_project'].".name), ".
		" CONCAT(".$this->db->config['table_customer'].".name, \" - \", ".$this->db->config['table_project'].".name)) as name".
		" FROM ".$this->db->config['table_customer'].", ".
		$this->db->config['table_project'].
		" LEFT JOIN ".$this->db->config['table_project']." as project2".
		" ON project2.id = ".$this->db->config['table_project'].".parent".
		" WHERE ".$this->db->config['table_project'].".id = '".$this->id."'".
		" AND ".$this->db->config['table_project'].".customer_id = ".$this->db->config['table_customer'].".id".
		" LIMIT 0,1";

		return $this->db->getValue($query);
	}

	function url_to_planning() {
		if ($GLOBALS['param']['ext_planning']) {
			if ($GLOBALS['param']['layout_type'] == "genova") {
				return link_content("content=requests.php&project_id=".$this->id);
			} else {
				return link_content("content=projectplanningrequests.php&project_id=".$this->id);
			}
		} else {
			return link_content("content=project.php&project_id=".$this->id);
		}
	}
	
	function link_name_in_full_to_planning() {
		return Html_Tag::a($this->url_to_planning(), $this->name_in_full());
	}
	
	function url_to_edit($parameters = null) {
		if (!empty($parameters)) {
			$parameters = "&".$parameters;
		}
		return link_content("content=project.edit.php&project_id=".$this->id.$parameters);
	}
	
	function link_to_edit($string, $parameters = null) {
		return Html_Tag::a($this->url_to_edit($parameters), $string, array('class' => "modal modal-reload"));
	}
	
	function link_name_in_full_to_edit() {
		return $this->link_to_edit($this->name_in_full());
	}
	
	function url_to_accounts() {
		return link_content("content=projectaccounts.php&project_id=".$this->id);
	}
	
	function link_name_in_full_to_accounts() {
		if ($GLOBALS['param']['layout_type'] == "genova") {
			return Html_Tag::a($this->url_to_details(), $this->name_in_full());
		} else {
			return Html_Tag::a($this->url_to_accounts(), $this->name_in_full());
		}
	}
	
	function url_to_details() {
		if ($GLOBALS['param']['ext_finances']) {
			return link_content("content=projectdetails.php&project_id=".$this->id);
		} else {
			return link_content("content=project.php&project_id=".$this->id);
		}
	}
	
	function link_name_in_full_to_details() {
		return Html_Tag::a($this->url_to_details(), $this->name_in_full());
	}
	
	function url() {
		return link_content("content=projectdetails.php&project_id=".$this->id);
	}
	
	function name_in_full_with_url() {
		return Html_Tag::a($this->url(), $this->name_in_full());
	}

	function day_activity_starting() {
		$days = array();

		$days[] = $this->db->getValue("SELECT MIN(day) FROM ".$this->db->config['table_hour']." WHERE ".$this->db->config['table_hour'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_hour'].".project_id");
		$days[] = $this->db->getValue("SELECT MIN(day) FROM ".$this->db->config['table_salefigure']." WHERE ".$this->db->config['table_salefigure'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_salefigure'].".project_id");
		$days[] = $this->db->getValue("SELECT MIN(day) FROM ".$this->db->config['table_purchase']." WHERE ".$this->db->config['table_purchase'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_purchase'].".project_id");
		$days[] = $this->db->getValue("SELECT MIN(day) FROM ".$this->db->config['table_expense']." WHERE ".$this->db->config['table_expense'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_expense'].".project_id");

		if( $GLOBALS['param']['projectestimate_multiple'] == 1) {
			$days[] = $this->db->getValue("SELECT MIN(time) FROM ".$this->db->config['table_estimates']." WHERE ".$this->db->config['table_estimates'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_estimates'].".project_id");
		}

		foreach ($days as $day_) {
			if ($day_ > 0) {
				if (!isset($day)) {
					$day = $day_;
				}
				$day = min($day_, $day);
			}
		}

		if (!isset($day)) {
			$day = false;
		}

		return $day;
	}

	function day_activity_stopping() {
		$days = array();

		$days[] = $this->db->getValue("SELECT MAX(day) FROM ".$this->db->config['table_hour']." WHERE ".$this->db->config['table_hour'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_hour'].".project_id");
		$days[] = $this->db->getValue("SELECT MAX(day) FROM ".$this->db->config['table_salefigure']." WHERE ".$this->db->config['table_salefigure'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_salefigure'].".project_id");
		$days[] = $this->db->getValue("SELECT MAX(day) FROM ".$this->db->config['table_purchase']." WHERE ".$this->db->config['table_purchase'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_purchase'].".project_id");
		$days[] = $this->db->getValue("SELECT MAX(day) FROM ".$this->db->config['table_expense']." WHERE ".$this->db->config['table_expense'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_expense'].".project_id");

		if( $GLOBALS['param']['projectestimate_multiple'] == 1) {
			$days[] = $this->db->getValue("SELECT MAX(time) FROM ".$this->db->config['table_estimates']." WHERE ".$this->db->config['table_estimates'].".project_id = '".$this->id."' GROUP BY ".$this->db->config['table_estimates'].".project_id");
		}

		foreach ($days as $day_) {
			if ($day_ > 0) {
				if (!isset($day)) {
					$day = $day_;
				}
				$day = max($day_, $day);
			}
		}
		if (!isset($day)) {
			$day = false;
		}

		return $day;
	}

	protected function hash_key_to_object_property($key) {
		switch ($key) {
			case 'project_id':
				return 'id';

			 case 'project_name':
				return 'name';

			 case 'project_number':
				return 'number';

			 case 'projectstatus_name':
				return 'projectstatus_id';

			default:
				return parent::hash_key_to_object_property($key);
		}
	}

	function merge_into($project_merge) {
		$q = "UPDATE ".$this->db->config['table_expense']."
		SET customer_id = ".(int)$project_merge->customer_id.",
		project_id = ".(int)$project_merge->id."
		WHERE customer_id = ".(int)$this->customer_id."
		AND project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_forecast']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_hour']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = '".(int)$this->id."'";
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_purchase']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_request']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_salefigure']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_chargeplan']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_estimates']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_event']."
		SET customer_id = ".(int)$project_merge->customer_id.",
		project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_project']."
		SET parent = ".(int)$project_merge->id."
		WHERE parent = ".(int)$this->id;
		$this->db->query($q);

		$q = "UPDATE ".$this->db->config['table_projectcontacts']."
		SET project_id = ".(int)$project_merge->id."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "DELETE FROM ".$this->db->config['table_projectoptions']."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);

		$q = "DELETE FROM ".$this->db->config['table_rateproject']."
		WHERE project_id = ".(int)$this->id;
		$this->db->query($q);
	}
}

function is_parent($project_id) {
	$project = new Project($project_id);
	return $project->is_parent();
}

function show_form_estimates($project_id, $project_encours) {
	$db = new db();
	$hour_previ = array();
	$customer_id = get_project_customer_id($project_id);
	$form_estimates = "";

	$sum_hour_previ = 0;
	$result_span = $db->query("SELECT task_id, span FROM ".$db->config['table_forecast']." WHERE project_id = '".$project_id."'");
	while ($row_span = $db->fetchArray($result_span[0])) {
		$hour_previ[$row_span['task_id']] = isset($hour_previ[$row_span['task_id']]) ? $hour_previ[$row_span['task_id']] : 0;
		$sum_hour_previ += $hour_previ[$row_span['task_id']];
		$span_previ[$row_span['task_id']] = $row_span['span'];
		$hour_previ[$row_span['task_id']] = $row_span['span'];
	}

	$result = $db->query("SELECT projectstatus_id, salefigure_previ, purchase_previ FROM ".$db->config['table_project']." WHERE id = '".$project_id."'");
	$row = $db->fetchArray($result[0]);
	$projectstatus = $row['projectstatus_id'];
	$salefigure_previ = $row['salefigure_previ'];
	$purchase_previ = $row['purchase_previ'];

	if ($projectstatus <= 1 or preg_match("/aa/", $_SESSION['useraccess'])) {
		$is_form = true;
	} else {
		$is_form = false;
	}

	if ($is_form) {
		$form_estimates .= "<form method=\"post\" action=\"\" name=\"form_project_".$project_id."_estimate\">";
		$form_estimates .= "<input type=\"hidden\" name=\"action\" value=\"calculate\" />";
		$form_estimates .= "<input type=\"hidden\" name=\"project_form\" value=\"".$project_id."\" />";
		$form_estimates .= "<input type=\"hidden\" name=\"customer_id\" value=\"".$customer_id."\" />";
		$form_estimates .= "<input type=\"hidden\" name=\"project_id\" value=\"".$project_encours."\" />";
	}

	$table_estimates['header'][0] = array(
		'value' => get_projectname($project_id),
		'type' => "th",
	);
	$table_estimates['header'][1] = array(
		'value' => $GLOBALS['param']['tasks'],
		'type' => "th",
	);
	$table_estimates['header'][2] = array(
		'value' => $GLOBALS['txt_time'],
		'type' => "th",
	);
	$table_estimates['header'][3] = array(
		'value' =>$GLOBALS['param']['cost_production'],
		'colspan' => 2,
		'type' => "th",
	);

	$table_estimates['subheader'][0] = "";
	$table_estimates['subheader'][1] = "";
	$table_estimates['subheader'][2] = "";
	$table_estimates['subheader'][3] = Rates::text();
	$table_estimates['subheader'][4] = $GLOBALS['txt_total'];

	$query = "SELECT ".$db->config['table_tasksubject'].".id as task_id, ".
	$db->config['table_tasksubject'].".name as task_name".
	" FROM ".$db->config['table_tasksubject'].
	" LEFT JOIN ".$db->config['table_rate'].
	" ON ".$db->config['table_rate'].".task_id = ".$db->config['table_tasksubject'].".id".
	" GROUP BY ".$db->config['table_tasksubject'].".id".
	" ORDER BY ".$db->config['table_tasksubject'].".name";
	$result = $db->query($query);

	if ($result[1] == 0) {
		$table_estimates['task_0'][] = array(0 => $GLOBALS['txt_noentry'], 2 => 6);
	} else {
		while ($row = $db->fetchArray($result[0])) {
			if (!isset($span_previ[$row['task_id']])) {
				$span_previ[$row['task_id']] = 0;
			}
			if (!isset($sum_hour)) {
				$sum_hour = 0;
			}
			$sum_hour += $span_previ[$row['task_id']];
			if (!isset($production[$row['task_id']]) or !$production[$row['task_id']]) {
				$rate = new Rate("production");
				$production[$row['task_id']] = $rate->by_task($row['task_id'], time());
			}
			if (!isset($sum_production_previ)) {
				$sum_production_previ = 0;
			}
			if (!isset($production[$row['task_id']])) {
				$production[$row['task_id']] = 0;
			}
			if (!isset($hour_previ[$row['task_id']])) {
				$hour_previ[$row['task_id']] = 0;
			}
			$sum_production_previ += $production[$row['task_id']] * $hour_previ[$row['task_id']];
			$tasks[$row['task_id']] = $row['task_name'];
		}
	}
	$table_estimates['salefigure'][] = "<strong><label for=\"salefigure_previ\">".$GLOBALS['param']['salefigure']."</label></strong>";
	$table_estimates['salefigure'][] = array(
		'value' => "",
		'colspan' => 3,
	);
	if ($is_form) {
		$table_estimates['salefigure'][] = "<input id=\"salefigure_previ\" type=\"text\" name=\"salefigure_previ\" value=\"".$salefigure_previ."\" size=\"".$GLOBALS['htmlconfig']['text_size4']."\" />";
	} else {
		$table_estimates['salefigure'][] = Format::currency_amount($salefigure_previ);
	}
	if (is_array($tasks)) {
		$passage = 0;
		foreach($tasks as $clef_task => $valeur_task) {
			$table_id = 'task_'.$clef_task;
			if (!$passage) {
				$table_estimates[$table_id][] = "<strong><label for=\"task_".$clef_task."\">".$GLOBALS['txt_span']."</label></strong>";
				$passage++;
			} else {
				$table_estimates[$table_id][] = "";
			}
			$table_estimates[$table_id][] = "<label for=\"task_".$clef_task."\">".$tasks[$clef_task]."</label>";
			$seconds_in_period = 3600;
			if ($GLOBALS['param']['time_unit'] == "d") {
				$seconds_in_period = $GLOBALS['param']['absence_fullday'];
			}
			if ($is_form) {
				$table_estimates[$table_id][] = "<input id=\"task_".$clef_task."\" type=\"text\" name=\"hour_previ_".$clef_task."_".$span_previ[$clef_task]."\" value=\"".prepare_hourinput($span_previ[$clef_task], $GLOBALS['param']['time_unit'])."\" size=\"".$GLOBALS['htmlconfig']['text_size4']."\" />";
			} else {
				$table_estimates[$table_id][] = Format::span($span_previ[$clef_task], $GLOBALS['param']['time_unit']);
			}
			$table_estimates[$table_id][] = Format::currency_amount($production[$clef_task] * $seconds_in_period);
			$table_estimates[$table_id][] = Format::currency_amount($production[$clef_task] * $hour_previ[$clef_task]);
		}
	}
	$totalcost_previ = $sum_production_previ + $purchase_previ;
	$table_estimates['totalcost_previ'][] = "<strong><label for=\"purchase_previ\">".$GLOBALS['param']['purchases']."</label></strong>";
	$table_estimates['totalcost_previ'][] = array(
		'value' => "",
		'colspan' => 3,
	);
	if (!$purchase_previ) {
		$purchase_previ = round($sum_production_previ * $GLOBALS['param']['purchase_rate'], 2);
	}

	if ($is_form) {
		$table_estimates['totalcost_previ'][] = "<input id=\"purchase_previ\" type=\"text\" name=\"purchase_previ\" value=\"".$purchase_previ."\" size=\"".$GLOBALS['htmlconfig']['text_size4']."\" />";
	} else {
		$table_estimates['totalcost_previ'][] = "<strong>".currency_format($purchase_previ)."</strong>";
	}

	$table_estimates['cost'][] = "<strong>".$GLOBALS['txt_cost']."</strong>";
	$table_estimates['cost'][] = "";
	$table_estimates['cost'][] = "<strong>".Format::span($sum_hour, $GLOBALS['param']['time_unit'])."</strong>";
	$table_estimates['cost'][] = "";
	$table_estimates['cost'][] = "<strong>".currency_format($totalcost_previ)."</strong>";
	$table_estimates['spacer'][] = array(
		'value' => "",
		'colspan' => 7,
		'class' => "small",
	);
	$table_estimates['margin'][] = "<strong>".$GLOBALS['txt_margin']."</strong>";
	$table_estimates['margin'][] = array(
		'value' => "",
		'colspan' => 3,
	);
	$marge_previ = $salefigure_previ - $totalcost_previ;
	if ($marge_previ >= 0) {
		$table_estimates['margin'][] = array(
			'value' => "<span class=\"green_number\">".currency_format($marge_previ)."</span>",
			'nowrap' => "nowrap",
		);
	} else {
		$table_estimates['margin'][] = array(
			'value' => "<span class=\"red_number\">".currency_format($marge_previ)."</span>",
			'nowrap' => "nowrap",
		);
	}
	$table_estimates['profitabilityrate'][] = "<strong>".$GLOBALS['txt_profitabilityrate']."</strong>";
	$table_estimates['profitabilityrate'][] = array(
		'value' => "",
		'colspan' => 3,
	);
	if ($salefigure_previ > 0) {
		$rentabilite_previ = ($marge_previ / $salefigure_previ)*100;
		if ($rentabilite_previ >= 0) {
			$table_estimates['profitabilityrate'][] = array(
				'value' => "<span class=\"green_number\">".number_format($rentabilite_previ, 2, ",", " ")." %</span>",
				'nowrap' => "nowrap",
			);
		} else {
			$table_estimates['profitabilityrate'][] = array(
				'value' => "<span class=\"red_number\">".number_format($rentabilite_previ, 2, ",", " ")." %</span>",
				'nowrap' => "nowrap",
			);
		}
	} else {
		$table_estimates['profitabilityrate'][] = array(
			'value' => "&nbsp;",
			'nowrap' => "nowrap",
		);
	}

	if ($is_form) {
		$table_estimates['spacer_2'][] = array(
			'value' => "&nbsp;",
		 	'class' => "small",
			'colspan' => 2,
		);
		$table_estimates['submit'][] = array(
			'value' => "&nbsp;",
			'colspan' => 2,
		);
		$field = new Html_Input_Save("return");
		$table_estimates['submit'][] = array(
			'value' => $field->input(),
			'colspan' => 2,
		);
	}

	if ($GLOBALS['param']['cost_rateproject']) {
		$table_estimates['header'][] = array(
			'value' => $GLOBALS['txt_prestation'],
			'type' => "th",
			'colspan' => 2,
		);
		$table_estimates['subheader'][] = Rates::text();
		$table_estimates['subheader'][] = $GLOBALS['txt_total'];
		$table_estimates['salefigure'][] = "";
		$table_estimates['salefigure'][] = Format::currency_amount($salefigure_previ);
		$rates = new Rates_Project();
		$rates->project_id = $project_id;
		$rates->select();
		$rates_input = $rates->to_array_with_input_for_all_task_id();
		$rates_amount = $rates->to_array_with_amount_for_all_task_id();
		foreach ($rates_input as $task_id => $input) {
			$table_estimates['task_'.$task_id][] = $input;
			$value = Format::currency_amount($rates_amount[$task_id] * $span_previ[$task_id]);
			$table_estimates['task_'.$task_id][] = $value;

			if (!isset($rateproject_cost)) {
				$rateproject_cost = 0;
			}
			$rateproject_cost += $rates_amount[$task_id] * $span_previ[$task_id];
		}
		$table_estimates['totalcost_previ'][] = "";
		$table_estimates['totalcost_previ'][] = Format::currency_amount($purchase_previ);
		$rateproject_cost += $purchase_previ;
		$table_estimates['cost'][] = "";
		$table_estimates['cost'][] = "<strong>".currency_format($rateproject_cost)."</strong>";
		$rateproject_margin = $salefigure_previ - $rateproject_cost;
		$table_estimates['margin'][] = "";
		if ($rateproject_margin >= 0) {
			$table_estimates['margin'][] = array(
				'value' => "<span class=\"green_number\">".currency_format($rateproject_margin)."</span>",
				'nowrap' => "nowrap",
			);
		} else {
			$table_estimates['margin'][] = array(
				'value' => "<span class=\"red_number\">".currency_format($rateproject_margin)."</span>",
				'nowrap' => "nowrap",
			);
		}
		$table_estimates['profitabilityrate'][] = "";
		if ($salefigure_previ > 0) {
			$rateproject_rentabilite = ($rateproject_margin / $salefigure_previ) * 100;
			if ($rateproject_rentabilite >= 0) {
				$table_estimates['profitabilityrate'][] = array(
					'value' => "<span class=\"green_number\">".number_format($rateproject_rentabilite, 2, ",", " ")." %</span>",
					'nowrap' => "nowrap",
				);
			} else {
				$table_estimates['profitabilityrate'][] = array(
					'value' => "<span class=\"red_number\">".number_format($rateproject_rentabilite, 2, ",", " ")." %</span>",
					'nowrap' => "nowrap",
				);
			}
		} else {
			$table_estimates['profitabilityrate'][] = array(
				'value' => "&nbsp;",
				'nowrap' => "nowrap",
			);
		}
	}

	$form_estimates .= show_table(array('lines' => $table_estimates, 'class' => "colform"));
	if ($is_form) {
		$form_estimates .= "</form>";
	}

	return $form_estimates;
}

function confirm_customer_and_project($customer_id, $project_id, $userid, $useraccess) {
	$db = new db();
	$customer_old = "";
	$project_old = "";

	switch ($GLOBALS['param']['layout_projectmenu']) {
		case "autocompleteinput":
			if ($useraccess != "*" and !preg_match("/^aa$/i", $useraccess)) {
				$query_project_old = "SELECT ".$db->config['table_project'].".id FROM ".$db->config['table_project'].", ".$db->config['table_customer']." WHERE (((".$db->config['table_customer'].".user_id LIKE '%".$userid."%' AND ".$db->config['table_customer'].".id = ".$db->config['table_project'].".customer_id) OR ".$db->config['table_project'].".user_id LIKE '%\"".$userid."\"%') AND ".$db->config['table_project'].".id = '".$project_id."')";
				$project_old = (int)$db->getValue($query_project_old);
				$customer_old = (int)get_project_customer_id($project_old);
			} else {
				$project_old = $project_id;
				$customer_old = (int)get_project_customer_id($project_old);
			}
			break;
		case "doubleselect":
		default:
			if ($useraccess != "*" and !preg_match("/^aa$/i", $useraccess)) {
				$user = Plugins::factory("User", $userid);
				if ($user->is_responsible_for_project($project_id)) {
					$project = new Project();
					$project->load($project_id);
					$project_old = $project->id;
					$customer_old = $project->customer_id;
				} elseif ($user->is_responsible_for_a_project_for_customer($customer_id)) {
					$project_old = 0;
					$customer_old = $customer_id;
				} else {
					$project_old = 0;
					$customer_old = 0;
				}
			} else {
				if ($project_id > 0) {
					$project = new Project(0, $db);
					$project->load($project_id);
					$project_old = $project_id;
					$customer_old = $project->customer_id;
				} else {
					$project_old = 0;
					$customer_old = $customer_id;
				}
			}

			$customer_old = confirm_customer($customer_old, $project_old);
			$project_old = confirm_project($customer_old, $project_old);
			break;
	}

	return array((int)$customer_old, (int)$project_old);
}

function get_projects_list_for_autocompleteinput($project_ids) {
	$dbLoad = new db();
	$project_list = array();

	$query_project = "SELECT ".$dbLoad->config['table_project'].".id as id, ".
	" IF(".$dbLoad->config['table_project'].".parent != 0, CONCAT(".$dbLoad->config['table_customer'].".name, \" - \", project2.name, \" -- \", ".$dbLoad->config['table_project'].".name), CONCAT(".$dbLoad->config['table_customer'].".name, \" - \", ".$dbLoad->config['table_project'].".name)) as name".
	" FROM ".$dbLoad->config['table_customer'].", ".$dbLoad->config['table_project'].
	" LEFT JOIN ".$dbLoad->config['table_project']." as project2".
	" ON project2.id = ".$dbLoad->config['table_project'].".parent".
	" WHERE ".$dbLoad->config['table_project'].".customer_id = ".$dbLoad->config['table_customer'].".id".
	" AND ".$dbLoad->config['table_project'].".id IN ".array_2_list($project_ids).
	" ORDER BY name";
	$result_project = $dbLoad->query($query_project);
	if ($result_project[1] > 0) {
		while ($row_project = $dbLoad->fetchArray($result_project[0])) {
			$project_list[$row_project['id']] = $row_project['name'];
		}
	}

	return $project_list;
}

function get_projets_id_for_user($userid, $useraccess) {
	$dbLoad = new db();
	$project_ids = array();

	$query_ids = "SELECT ".$dbLoad->config['table_project'].".id as project_id".
	" FROM ".$dbLoad->config['table_project'];

	if (!preg_match("/^aa$/i",$useraccess)) {
		$query_ids .= " LEFT JOIN ".$dbLoad->config['table_customer'].
		" ON ".$dbLoad->config['table_customer'].".user_id LIKE '%\"".$userid."\"%'".
		" WHERE ".$dbLoad->config['table_project'].".customer_id = ".$dbLoad->config['table_customer'].".id".
		" OR ".$dbLoad->config['table_project'].".user_id LIKE '%\"".$userid."\"%'";
	}
	$result_ids = $dbLoad->query($query_ids);
	while ($row_ids = $dbLoad->fetchArray($result_ids[0])) {
		$project_ids[] = $row_ids['project_id'];
	}

	return $project_ids;
}

function prepare_project_list($userid, $useraccess) {
	$dbLoad = new db();

	$project_ids = get_projets_id_for_user($userid, $useraccess);
	$project_list = get_projects_list_for_autocompleteinput($project_ids);

	return $project_list;
}

function is_project_active_with_expenses($project_id) {
	$db = new db();

	$query = "SELECT SUM(amount) as active FROM ".$db->config['table_expense'].
	" WHERE project_id = '".(int)$project_id."'".
	" GROUP BY project_id";
	$result = $db->getVerif($query);

	return $result;
}

function is_project_active_with_hour($project_id) {
	$db = new db();

	$query = "SELECT SUM(span) as active FROM ".$db->config['table_hour'].
	" WHERE project_id = '".(int)$project_id."'".
	" GROUP BY project_id";
	$result = $db->getVerif($query);

	return $result;
}

function show_alert_box_projecttaxrefund($projects_id, $start=0, $stop=0) {
	$alert_box = "";
	$title = $GLOBALS['tip_alert_projecttaxrefund'];
	$elements = array();

	$element = "<form method=\"post\" action=\"".link_content("content=reportexcel.php")."\" name=\"form_projectdetails_hour_export\" id=\"form_projectdetails_hour_export\">";
	$element .= show_input_hidden("action", "go");
	$element .= show_input_hidden("method", "mime");
	$element .= show_input_hidden("report", "details_hour_link_with_projects");
	foreach ($projects_id as $project_id) {
		$element .= show_input_hidden("projects_id[]", $project_id);
	}
	$element .= show_input_hidden("starttime", $start);
	$element .= show_input_hidden("stoptime", $stop);
	$element .= "<a href=\"".$GLOBALS['location']."?content=".$GLOBALS['content']."\" onclick=\"document.form_projectdetails_hour_export.submit(); return false;\">".$GLOBALS['tip_exportexcel_time']."</a>";
	$element .= "</form>";
	$elements[] = array('value' => $element);

	if (count($elements) > 0) {
		$area = new Alert_Area($elements);
		$alert_box = $area->show();
	}

	return $alert_box;
}

function show_alert_box_projectdetails($project_id, $start = 0, $stop = 0) {
	$title = $GLOBALS['tip_alert_projectdetails'];
	$elements = array();

	$children = new Projects_Collector();
	$children->parent = $project_id;
	$children->select();
	
	$project = new Project($project_id);
	if ($project->load()) {
		if ($project->is_active_with_hour_among_children()) {
			$element = "<form method=\"post\" action=\"".link_content("content=reportexcel.php")."\" name=\"form_projectdetails_hour_export\" id=\"form_projectdetails_hour_export\">";
			$element .= show_input_hidden("action", "go");
			$element .= show_input_hidden("method", "mime");
			$element .= show_input_hidden("report", "details_hour_link_with_projects");
			$element .= show_input_hidden("projects_id[]", $project_id);
			foreach ($children as $child) {
				$element .= show_input_hidden("projects_id[]", $child->id);
			}
			$element .= show_input_hidden("starttime", $start);
			$element .= show_input_hidden("stoptime", $stop);
			$element .= "<a href=\"".$GLOBALS['location']."?content=".$GLOBALS['content']."\" onclick=\"document.form_projectdetails_hour_export.submit(); return false;\">".$GLOBALS['tip_exportexcel_time']."</a>";
			$element .= "</form>";
			$elements[] = array('value' => $element);
		}

		if ($GLOBALS['param']['ext_expenses'] and $project->is_active_with_expense_among_children()) {
			$element = "<form method=\"post\" action=\"".link_content("content=reportexcel.php")."\" name=\"form_projectdetails_expense_export\" id=\"form_projectdetails_expense_export\">";
			$element .= show_input_hidden("action", "go");
			$element .= show_input_hidden("method", "mime");
			$element .= show_input_hidden("report", "details_expense_with_projects");
			$element .= show_input_hidden("projects_id[]", $project_id);
			foreach ($children as $child) {
				$element .= show_input_hidden("projects_id[]", $child->id);
			}
			$element .= show_input_hidden("starttime", $start);
			$element .= show_input_hidden("stoptime", $stop);
			$element .= "<a href=\"".$GLOBALS['location']."?content=".$GLOBALS['content']."\" onclick=\"document.form_projectdetails_expense_export.submit(); return false;\">".$GLOBALS['tip_exportexcel_expense']."</a>";
			$element .= "</form>";
			$elements[] = array('value' => $element);
		}

		$element = "<form method=\"post\" action=\"".link_content("content=reportexcel.php")."\" name=\"form_projectdetails_complete\" id=\"form_projectdetails_complete\">";
		$element .= show_input_hidden("action", "go");
		$element .= show_input_hidden("method", "mime");
		$element .= show_input_hidden("report", "details_complete_with_projects");
		$element .= show_input_hidden("projects_id[]", $project_id);
		foreach ($children as $child) {
			$element .= show_input_hidden("projects_id[]", $child->id);
		}
		$element .= "<a href=\"".$GLOBALS['location']."?content=".$GLOBALS['content']."\" onclick=\"document.form_projectdetails_complete.submit(); return false;\">".$GLOBALS['tip_exportexcel_complete']."</a>";
		$element .= "</form>";
		$elements[] = array('value' => $element);
	}

	foreach (Plugins::call_hook("alerts", array("content" => $GLOBALS['content'])) as $alert) {
		$elements[] = array(
			'value' => $alert,
		);
	}

	return array($title, $elements);
}

function get_project_id($number) {
	trigger_error("Function 'get_project_id' is deprecated since 12/06/2012. Please use 'Project::match_existing'.", E_USER_WARNING);
}

function get_project_customer_id($project_id) {
	$dbLoad = new db();

	$query_project_customer_id = "SELECT customer_id FROM ".$dbLoad->config['table_project'].
		" WHERE id = ".(int)$project_id;
	return $dbLoad->getValue($query_project_customer_id);
}

function get_projects_projectnumber($project_ids) {
	$dbLoad = new db();
	$query_IN = array_2_list($project_ids);
	$projects_number = false;

	$query_project_number = "SELECT ".
	$dbLoad->config['table_project'].".id as project_id, ".
	$dbLoad->config['table_project'].".number as project_number".
	" FROM ".$dbLoad->config['table_project'].
	" WHERE ".$dbLoad->config['table_project'].".id IN ".$query_IN.
	" GROUP BY ".$dbLoad->config['table_project'].".id".
	" ORDER BY project_number";
	$result_project_number = $dbLoad->query($query_project_number);
	if ($result_project_number[1] > 0) {
		while ($row_project_number = $dbLoad->fetchArray($result_project_number[0])) {
			$projects_number[$row_project_number['project_id']] = $row_project_number['project_number'];
		}
	}

	return $projects_number;
}

function is_valid_project_id($project_id) {
	$valid_project = false;
	if ($project_id) {
		$valid_project = preg_match("/^(".$GLOBALS['txtconfig']['table_personal']."|[0-9]*)$/", $project_id);
	}

	return $valid_project;
}

function treat_projectoptions($action, $id, $vars="", $user_id, $content) {
	return treat_options("project", $action, $id, $vars, $user_id, $content);
}

function get_list_projects($project_id="", $details = null) {
	$array_projects = array();
	$dbLoad = new db();

	if (!is_array($details)) {
		$details = array("level_0", "level_1", "level_2", "description", "projectstatus_id", "projectstatus", "customer_id", "project_id", "parent");
	}

	$query_project = "SELECT ".$dbLoad->config['table_project'].".id as id, ".
	" IF(".$dbLoad->config['table_project'].".parent != 0, CONCAT(".$dbLoad->config['table_customer'].".name, \" - \", project2.name, \" -- \", ".$dbLoad->config['table_project'].".name), CONCAT(".$dbLoad->config['table_customer'].".name, \" - \", ".$dbLoad->config['table_project'].".name)) as sort, ".
	$dbLoad->config['table_customer'].".name as level_0, ".
	$dbLoad->config['table_customer'].".id as customer_id, ".
	" IF(".$dbLoad->config['table_project'].".parent != 0, project2.name, ".$dbLoad->config['table_project'].".name) as level_1, ".
	" IF(".$dbLoad->config['table_project'].".parent != 0, ".$dbLoad->config['table_project'].".name, '') as level_2, ".
	$dbLoad->config['table_project'].".id as project_id, ".
	$dbLoad->config['table_project'].".parent as parent, ".
	$dbLoad->config['table_project'].".description as description, ".
	$dbLoad->config['table_project'].".start as start, ".
	$dbLoad->config['table_project'].".stop as stop, ".
	$dbLoad->config['table_project'].".projectstatus_id as projectstatus_id, ".
	$dbLoad->config['table_project'].".number as projectnumber, ".
	$dbLoad->config['table_projectlink'].".name as projectlink, ".
	$dbLoad->config['table_projectstatus'].".name as projectstatus".
	" FROM ".$dbLoad->config['table_customer'].", ".
	$dbLoad->config['table_project'].
	" LEFT JOIN ".$dbLoad->config['table_project']." as project2".
	" ON project2.id = ".$dbLoad->config['table_project'].".parent".
	" LEFT JOIN ".$dbLoad->config['table_projectstatus'].
	" ON ".$dbLoad->config['table_project'].".projectstatus_id = ".$dbLoad->config['table_projectstatus'].".id".
	" LEFT JOIN ".$dbLoad->config['table_projectlink'].
	" ON ".$dbLoad->config['table_project'].".projectlink_id = ".$dbLoad->config['table_projectlink'].".id".
	" WHERE ".$dbLoad->config['table_project'].".customer_id = ".$dbLoad->config['table_customer'].".id";
	if ($project_id) {
		if (is_array($project_id)) {
			$project_IN = array_2_list($project_id);
			$query_project .= " AND ".$dbLoad->config['table_project'].".id IN ".$project_IN;
		} else {
			$query_project .= " AND ".$dbLoad->config['table_project'].".id = '".(int)$project_id."'";
		}
	}
	$query_project .= " ORDER BY sort";

	$result_project = $dbLoad->query($query_project);
	while ($row_project = $dbLoad->fetchArray($result_project[0])) {
		foreach ($details as $detail) {
			$array_projects[$row_project['id']][$detail] = $row_project[$detail];
		}
	}

	return $array_projects;
}

function show_project_child($project_id) {
	$dbLoad = new db();
	$project_child = "";

	if ((int)$project_id != 0) {
		$query_projectchild = "SELECT ".$dbLoad->config['table_project'].".id as project_id, ".
		$dbLoad->config['table_project'].".name".
		" FROM ".$dbLoad->config['table_project'].
		" WHERE ".$dbLoad->config['table_project'].".parent = '".(int)$project_id."'".
		" ORDER BY ".$dbLoad->config['table_project'].".name";
		$result_projectchild = $dbLoad->query($query_projectchild);
		if ($result_projectchild[1] > 0) {
			while ($row_projectchild = $dbLoad->fetchArray($result_projectchild[0])) {
				$project_child .= "<a href=\"".link_content("content=project.php&project_id=".$row_projectchild['project_id'])."\">".format_name($row_projectchild['name'])."</a>, ";
			}
			$project_child = preg_replace("/, $/", "", $project_child);
		}
	}

	return $project_child;
}

function show_table_project($project_id) {
	trigger_error("Function 'show_table_project' is deprecated since 18/02/2013. Please use 'Project::display'.", E_USER_WARNING);
}

function get_array_projects() {
	trigger_error("Function 'get_array_projects' is deprecated since 12/10/2017. Please use 'Projects::select'.", E_USER_WARNING);
}

function get_project_link($content, $company, $customer_id, $project_name, $project_id, $project_parent, $line="") {
	$dbLoad = new db();

	if ((int)$project_id > 0 and (int)$customer_id > 0 and $content != "") {
		$project_name = "<a href=\"".convert_link($content."&customer_id=".(int)$customer_id."&project_id=".(int)$project_id)."\">".$project_name."</a>";
	}

	$request_project = "<strong>".$company."</strong>";
	if ($line == "inline") {
		$break = " ";
	} else {
		$break = "<br />";
	}
	if ($project_parent) {
		$project_parent = $dbLoad->getValue("SELECT name FROM ".$dbLoad->config['table_project']." WHERE id = '".(int)$project_parent."'");
		$request_project .= $break.$project_parent.$break." -- ".$project_name;
	} else {
		$request_project .= $break.$project_name;
	}

	return $request_project;
}

function get_projectname($project_id) {
	$dbLoad = new db();

	$query_project = "SELECT ".$dbLoad->config['table_project'].".name".
	" FROM ".$dbLoad->config['table_project'].
	" WHERE ".$dbLoad->config['table_project'].".id = '".$project_id."'".
	" LIMIT 0,1";

	return $dbLoad->getValue($query_project);

}

function verif_table_projectlink_busy($projectlink_id) {
	$dbLoad = new db();

	$query_verifunction = "SELECT ".$dbLoad->config['table_project'].".id".
	" FROM ".$dbLoad->config['table_project'].
	" WHERE ".$dbLoad->config['table_project'].".projectlink_id = '".$projectlink_id."'";

	return $dbLoad->getVerif($query_verifunction);
}

function verif_table_projectstatus_busy($projectstatus_id) {
	$dbLoad = new db();

	$query_verifunction = "SELECT ".$dbLoad->config['table_project'].".id".
	" FROM ".$dbLoad->config['table_project'].
	" WHERE ".$dbLoad->config['table_project'].".projectstatus_id = '".$projectstatus_id."'";

	return $dbLoad->getVerif($query_verifunction);
}

function verif_table_forecast() {
	$dbLoad = new db();

	return $dbLoad->getVerifTable($dbLoad->config['table_forecast']);
}

function verif_table_project() {
	$dbLoad = new db();

	return $dbLoad->getVerifTable($dbLoad->config['table_project']);
}

function create_table_parameters($project_id) {
	$dbLoad = new db();

	$query_parameters = "SELECT ".$dbLoad->config['table_customer'].".name as customer_name, ".
	" IF(".$dbLoad->config['table_project'].".parent != 0, CONCAT(project2.name, \" -- \", ".$dbLoad->config['table_project'].".name), ".$dbLoad->config['table_project'].".name) as project_name, ".
	$dbLoad->config['table_project'].".name as project_name, ".
	$dbLoad->config['table_project'].".number as project_number, ".
	$dbLoad->config['table_project'].".description as description, ".
	$dbLoad->config['table_project'].".user_id as user_id, ".
	$dbLoad->config['table_project'].".start as start, ".
	$dbLoad->config['table_project'].".stop as stop, ".
	$dbLoad->config['table_project'].".validation as validation, ".
	$dbLoad->config['table_projectstatus'].".name as project_status, ".
	$dbLoad->config['table_projectlink'].".name as project_link, ".
	$dbLoad->config['table_project'].".id as project_id".
	" FROM ".$dbLoad->config['table_customer'].", ".
	$dbLoad->config['table_project'].
	" LEFT JOIN ".$dbLoad->config['table_project']." as project2".
	" ON project2.id = ".$dbLoad->config['table_project'].".parent".
	" LEFT JOIN ".$dbLoad->config['table_projectstatus'].
	" ON ".$dbLoad->config['table_project'].".projectstatus_id = ".$dbLoad->config['table_projectstatus'].".id".
	" LEFT JOIN ".$dbLoad->config['table_projectlink'].
	" ON ".$dbLoad->config['table_project'].".projectlink_id = ".$dbLoad->config['table_projectlink'].".id".
	" WHERE ".$dbLoad->config['table_project'].".id = '".$project_id."'".
	" AND ".$dbLoad->config['table_project'].".customer_id = ".$dbLoad->config['table_customer'].".id".
	" LIMIT 0,1";

	$result_parameters = $dbLoad->query($query_parameters);
	$row_parameters = $dbLoad->fetchArray($result_parameters[0]);

	$table_data[$GLOBALS['param']['level_0']] = array($GLOBALS['param']['level_0'].":&nbsp;", $row_parameters['customer_name']);
	$table_data[$GLOBALS['param']['level_1']] = array($GLOBALS['param']['level_1'].":&nbsp;", $row_parameters['project_name']);
	$table_data[$GLOBALS['param']['analyticalcode']] = array($GLOBALS['param']['analyticalcode'].":&nbsp;", $row_parameters['project_number']);
	$table_data[$GLOBALS['txt_description']] = array($GLOBALS['txt_description'].":&nbsp;", $row_parameters['description']);
	$user_ids = unserialize($row_parameters['user_id']);
	$list_users = list_users($user_ids);
	$table_data[$GLOBALS['param']['user']] = array($GLOBALS['param']['user'].":&nbsp;", $list_users);
	$table_data[$GLOBALS['txt_status']] = array($GLOBALS['txt_status'].":&nbsp;", $row_parameters['project_status']);
	if ($row_parameters['start'] > 0) {
		$table_data[$GLOBALS['txt_startdate']] = array($GLOBALS['txt_startdate'].":&nbsp;", date("d/m/Y", $row_parameters['start']));
	} else {
		$table_data[$GLOBALS['txt_startdate']] = array($GLOBALS['txt_startdate'].":&nbsp;", "--");
	}
	if ($row_parameters['stop'] > 0) {
		$table_data[$GLOBALS['txt_enddate']] = array($GLOBALS['txt_enddate'].":&nbsp;", date("d/m/Y", $row_parameters['stop']));
	} else {
		$table_data[$GLOBALS['txt_enddate']] = array($GLOBALS['txt_enddate'].":&nbsp;", "--");
	}
	if ($row_parameters['validation'] > 0) {
		$table_data[$GLOBALS['txt_lastvalidationdate']] = array($GLOBALS['txt_lastvalidationdate'].":&nbsp;", date("d/m/Y", $row_parameters['validation']));
	} else {
		$table_data[$GLOBALS['txt_lastvalidationdate']] = array($GLOBALS['txt_lastvalidationdate'].":&nbsp;", "--");
	}
	$table_data[$GLOBALS['txt_status']] = array($GLOBALS['txt_status'].":&nbsp;", $row_parameters['project_status']);
	$table_data[$GLOBALS['param']['level_1_link']] = array($GLOBALS['param']['level_1_link'].":&nbsp;", $row_parameters['project_link']);

	$row_em[] = sizeof($table_data);

	$parameters_table = array("table_data" => $table_data, "row_em" => "no");

	return $parameters_table;
}

function create_table_hours($project) {
	$dbLoad = new db();
	$year_encours = 0;
	$hours_table = array("table_data" => array(), "row_em" => array());

	$table = array();
	$table['name']['cells'][] = "";
	$colspan = 1;

	$day_encours = mktime(0, 0, 0, date("m", $project['daymin']), 1, date("Y", $project['daymin']));
	if ($project['daymin'] > 0 and $project['daymax'] > 0) {
		while ($day_encours <= $project['daymax']) {
			if (date("Y", $project['daymin']) == date("Y", $project['daymax'])) {
				$table['name']['cells'][] = array('value' => date("m/Y", $day_encours), 'colspan' => $colspan);
			} else {
				if (date("Y", $day_encours) != date("Y", $project['daymax'])) {
					if ($year_encours != date("Y", $day_encours)) {
						$table['name']['cells'][] = array('value' => date("Y", $day_encours), 'colspan' => $colspan);
					}
					$year_encours = date("Y", $day_encours);
				} else {
					$table['name']['cells'][] = array('value' => date("m/Y", $day_encours), 'colspan' => $colspan);
				}
			}

			$day_encours = mktime(0,0,0, date("m", $day_encours)+1, 1, date("Y", $day_encours));
		}
		$table['name']['cells'][] = array('value' => $GLOBALS['txt_total'], 'colspan' => 2);
		$project_sum_user = array();

		foreach ($project['hour_task'] as $clef_task => $valeur_task) {
			foreach ($project['hour_user'][$clef_task] as $clef_user => $valeur_user) {
				if (!isset($users[$clef_user]) or !$users[$clef_user]) {
					$users[$clef_user] = $dbLoad->getValue("SELECT name FROM ".$dbLoad->config['table_user']." WHERE id ='".$clef_user."'");
				}
				$user_data[] = shorten_username($users[$clef_user]);
				$day_encours = mktime(0,0,0, date("m", $project['daymin']), 1, date("Y", $project['daymin']));
				$year_encours = 0;
				$years = array();
				while ($day_encours <= $project['daymax']) {
					if (!isset($project_sum_user[$clef_user][0])) {
						$project_sum_user[$clef_user][0] = 0;
					}
					if (date("Y", $day_encours) != date("Y", $project['daymax'])) {
						if (isset($valeur_user[$day_encours][0]) and $valeur_user[$day_encours][0]) {
							$years[] = date("Y", $day_encours);
							if (!isset($user_data[date("Y", $day_encours)])) {
								$user_data[date("Y", $day_encours)] = 0;
							}
							$user_data[date("Y", $day_encours)] += $valeur_user[$day_encours][0];
							$project_sum_user[$clef_user][0] += $valeur_user[$day_encours][0];
						} else {
							if(!isset($user_data[date("Y", $day_encours)]) or !$user_data[date("Y", $day_encours)]) {
								$user_data[date("Y", $day_encours)] = 0;
							}
						}
					} else {
						if (isset($valeur_user[$day_encours][0]) and $valeur_user[$day_encours][0]) {
							$user_data[] = Format::span($valeur_user[$day_encours][0], $GLOBALS['param']['time_unit']);
							$project_sum_user[$clef_user][0] += $valeur_user[$day_encours][0];
						} else {
							$user_data[] = "";
						}
					}
					$day_encours = mktime(0,0,0, date("m", $day_encours)+1, 1, date("Y", $day_encours));
				}
				$user_data[] = Format::span($project_sum_user[$clef_user][0], $GLOBALS['param']['time_unit']);

				$years = array_unique($years);
				foreach($years as $year) {
					if ($user_data[$year]) {
						$user_data[$year] = Format::span($user_data[$year], $GLOBALS['param']['time_unit']);
					} else {
						$user_data[$year] = "";
					}
				}
				if ($project_sum_user[$clef_user][0] > 0) {
					$table["task_".$clef_task."_user_".$clef_user]['cells'] = $user_data;
				}
				unset($project_sum_user[$clef_user][0], $user_data);
			}


			if (!isset($tasks[$clef_task]) or !$tasks[$clef_task]) {
				$tasks[$clef_task] = $dbLoad->getValue("SELECT name FROM ".$dbLoad->config['table_tasksubject']." WHERE id ='".$clef_task."'");
			}
			$task_data[] = $tasks[$clef_task];
			$day_encours = mktime(0, 0, 0, date("m", $project['daymin']), 1, date("Y", $project['daymin']));
			$year_encours = 0;
			$years = array();
			while ($day_encours <= $project['daymax']) {
				if (date("Y", $day_encours) != date("Y", $project['daymax'])) {
					if (isset($valeur_task[$day_encours][0]) and $valeur_task[$day_encours][0]) {
						$years[] = date("Y", $day_encours);
						if (!isset($task_data[date("Y", $day_encours)])) {
							$task_data[date("Y", $day_encours)] = 0;
						}
						$task_data[date("Y", $day_encours)] += $valeur_task[$day_encours][0];
					} else {
						if (!isset($task_data[date("Y", $day_encours)]) or !$task_data[date("Y", $day_encours)]) {
							$task_data[date("Y", $day_encours)] = 0;
						}
					}
				} else {
					if (isset($valeur_task[$day_encours][0]) and $valeur_task[$day_encours][0]) {
						$task_data[] = Format::span($valeur_task[$day_encours][0], $GLOBALS['param']['time_unit']);
					} else {
						$task_data[] = "";
					}
				}
				$day_encours = mktime(0, 0, 0, date("m", $day_encours)+1, 1, date("Y", $day_encours));
			}
			$years = array_unique($years);
			foreach($years as $year) {
				if ($task_data[$year]) {
					$task_data[$year] = Format::span($task_data[$year], $GLOBALS['param']['time_unit']);
				} else {
					$task_data[$year] = "";
				}
			}

			$task_data[] = Format::span($project['sum_task'][$clef_task][0], $GLOBALS['param']['time_unit']);
			if ($project['sum_task'][$clef_task][0] > 0) {
				$table["task_".$clef_task]['cells'] = $task_data;
				$table["task_".$clef_task]['class'] = "strong";
			}
			unset($project['sum_task'][$clef_task][0], $task_data);
		}
		$table['total']['cells'][] = $GLOBALS['txt_total'];
		$table['total']['class'] = "strong";
		$day_encours = mktime(0,0,0, date("m", $project['daymin']), 1, date("Y", $project['daymin']));
		$year_encours = 0;
		$years = array();
		while ($day_encours <= $project['daymax']) {
			if (date("Y", $day_encours) != date("Y", $project['daymax'])) {
				if (isset($project['sum_month'][$day_encours][0]) and $project['sum_month'][$day_encours][0]) {
					$years[] = date("Y", $day_encours);
					if (!isset($table['total']['cells'][date("Y", $day_encours)])) {
						$table['total']['cells'][date("Y", $day_encours)] = 0;
					}
					$table['total']['cells'][date("Y", $day_encours)] += $project['sum_month'][$day_encours][0];
				} else {
					if (!isset($table['total']['cells'][date("Y", $day_encours)])) {
						$table['total']['cells'][date("Y", $day_encours)] = "";
					}
				}
			} else {
				if (isset($project['sum_month'][$day_encours][0]) and $project['sum_month'][$day_encours][0]) {
					$table['total']['cells'][] = Format::span($project['sum_month'][$day_encours][0], $GLOBALS['param']['time_unit']);
				} else {
					$table['total']['cells'][] = "";
				}
			}
			$day_encours = mktime(0,0,0, date("m", $day_encours)+1, 1, date("Y", $day_encours));
		}
		$years = array_unique($years);
		foreach($years as $year) {
			if ($table['total']['cells'][$year]) {
				$table['total']['cells'][$year] = Format::span($table['total']['cells'][$year], $GLOBALS['param']['time_unit']);
			} else {
				$table['total']['cells'][] = "";
			}
		}
		$table['total']['cells'][] = Format::span($project['hour'], $GLOBALS['param']['time_unit']);

		$hours_table = array('lines' => $table, 'class' => "detailed");
	}

	return $hours_table;
}

function create_table_profitability($project, $with_children = false) {
	$project_keys = array(
		'salefigure_previ',
		'salefigure_real',
		'purchase_previ',
		'purchase_real',
		'expenses',
		'expenses_previ',
		'cost_production_previ',
		'cost_production',
		'marge_production_previ',
		'marge_production',
		'project_id',
	);

	foreach ($project_keys as $key) {
		if (!isset($project[$key])) {
			$project[$key] = 0;
		}
	}
	
	$dbLoad = new db();

	$table_data['name'] = array(
		'cells' => array(
			array(
				'value' => $project['project_name'],
				'type' => 'th'
			),
			array(
				'value' => Format::label($GLOBALS['txt_time']),
				'colspan' => "3",
				'type' => 'th'
			),
		),
		'class' => ''
	);

	$table_data['subname'] = array(
		'cells' => array(
			array(
				'value' => '',
			),
			array(
				'value' => $GLOBALS['txt_forecasted'],
			),
			array(
				'value' => $GLOBALS['txt_real'],
			),
			array(
				'value' => $GLOBALS['txt_difference'],
			),
		),
		'class' => 'em'
	);

	$table_data['salefigure'] = array(
		'cells' => array(
			array(
				'value' => $GLOBALS['param']['salefigure'],
			),
			array(
				'value' => '',
			),
			array(
				'value' => '',
			),
			array(
				'value' => '',
			),
		),
		'class' => ''
	);

	$rates = new Rates();
	$is_rate_direct_available = $rates->is_rate_direct_available();
	$is_rate_production_available = $rates->is_rate_production_available();

	if (!isset($project_currencies)) {
		$project_currencies = new Project_Currencies($project['project_id']);
	}
	if ($is_rate_direct_available) {
		$table_data['name']['cells'][] = array(
			'value' => Format::label($GLOBALS['param']['cost_direct']),
			'colspan' => "3",
			'type' => 'th'
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_forecasted'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_real'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_difference'],
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real'] - $project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['salefigure_real'] - $project['salefigure_previ']),
			'nowrap' => "nowrap"
		);
	}

	if ($is_rate_production_available) {
		$table_data['name']['cells'][] = array(
			'value' => Format::label($GLOBALS['param']['cost_production']),
			'colspan' => "3",
			'type' => 'th'
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_forecasted'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_real'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_difference'],
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real'] - $project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['salefigure_real'] - $project['salefigure_previ']),
			'nowrap' => "nowrap"
		);
	}

	$job_total = array(
		1 => 0,
		2 => 0,
		3 => 0,
		4 => 0,
		5 => 0,
		6 => 0,
		7 => 0,
	);

	if (isset($project['list_tasks']) and is_array($project['list_tasks'])) {
		$passage = "";
		if ( !isset($clef_task) ) {
			$clef_task = 0;
		}
		$job_total[$clef_task] = array();
		foreach ($project['list_tasks'] as $clef_task) {
			if (!isset($tasks[$clef_task]) or !$tasks[$clef_task]) {
				$tasks[$clef_task] = $dbLoad->getValue("SELECT name FROM ".$dbLoad->config['table_tasksubject']." WHERE id ='".$clef_task."'");
			}
			if (!$passage) {
				$td_name = $GLOBALS['txt_hours'];
				$passage++;
			} else {
				$td_name = "";
			}
			$table_data[$clef_task]['cells'][] = array(
				'value' => $tasks[$clef_task]
			);

			if (!isset($project['project_sum_task_previ'][$clef_task][0])) {
				$project['project_sum_task_previ'][$clef_task][0] = 0;
			}
			$table_data[$clef_task]['cells'][] = array(
				'value' => Format::span($project['project_sum_task_previ'][$clef_task][0], $GLOBALS['param']['time_unit'])
			);

			if (!isset($project['sum_task'][$clef_task][0])) {
				$project['sum_task'][$clef_task][0] = 0;
			}
			$table_data[$clef_task]['cells'][] = array(
				'value' => Format::span($project['sum_task'][$clef_task][0])
			);

			$table_data[$clef_task]['cells'][] = array(
				'value' => Format::span((int)$project['project_sum_task_previ'][$clef_task][0] - (int)$project['sum_task'][$clef_task][0], $GLOBALS['param']['time_unit']),
				'class' => determine_class((int)$project['project_sum_task_previ'][$clef_task][0] - (int)$project['sum_task'][$clef_task][0]),
				'nowrap' => "nowrap"
			);

			if ($is_rate_direct_available) {
				if (!isset($project['project_sum_task_previ'][$clef_task][1])) {
					$project['project_sum_task_previ'][$clef_task][1] = 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['project_sum_task_previ'][$clef_task][1]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				if (!isset($project['sum_task'][$clef_task][1])) {
					$project['sum_task'][$clef_task][1] = 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['sum_task'][$clef_task][1]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['project_sum_task_previ'][$clef_task][1] - $project['sum_task'][$clef_task][1]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
					'class' => determine_class($project['project_sum_task_previ'][$clef_task][1] - $project['sum_task'][$clef_task][1]),
					'nowrap' => "nowrap"
				);
			}

			if ($is_rate_production_available) {
				if (!isset($project['project_sum_task_previ'][$clef_task][2])) {
					$project['project_sum_task_previ'][$clef_task][2] = 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['project_sum_task_previ'][$clef_task][2]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				if (!isset($project['sum_task'][$clef_task][2])) {
					$project['sum_task'][$clef_task][2] = 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['sum_task'][$clef_task][2]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount((int)$project_currencies->convert($project['project_sum_task_previ'][$clef_task][2] - (int)$project['sum_task'][$clef_task][2]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
					'class' => determine_class((int)$project['project_sum_task_previ'][$clef_task][2] - (int)$project['sum_task'][$clef_task][2]),
					'nowrap' => "nowrap"
				);

			}

			if (isset($project['project_sum_task_previ'][$clef_task][0])) {
				$job_total[1] += (int)$project['project_sum_task_previ'][$clef_task][0];
			}
			$job_total[2] += (int)$project['sum_task'][$clef_task][0];
			if (isset($project['project_sum_task_previ'][$clef_task][1])) {
				$job_total[3] += (int)$project['project_sum_task_previ'][$clef_task][1];
			}
			if (isset($project['sum_task'][$clef_task][1])) {
				$job_total[4] += (int)$project['sum_task'][$clef_task][1];
			}
			if (isset($project['project_sum_task_previ'][$clef_task][2])) {
				$job_total[5] += (int)$project['project_sum_task_previ'][$clef_task][2];
			}
			if (isset($project['sum_task'][$clef_task][2])) {
				$job_total[6] += (int)$project['sum_task'][$clef_task][2];
			}
		}

		$table_data['job_total']['cells'][] = array(
			'value' => $GLOBALS['txt_partialtotal']
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($job_total[1], $GLOBALS['param']['time_unit'])
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($job_total[2], $GLOBALS['param']['time_unit'])
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($job_total[1] - $job_total[2], $GLOBALS['param']['time_unit']),
			'class' => determine_class($job_total[1] - $job_total[2]),
			'nowrap' => "nowrap"
		);

		if ($is_rate_direct_available) {
			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[3]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			);

			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[4]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			);

			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[3] - $job_total[4]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				'class' => determine_class($job_total[3] - $job_total[4]),
				'nowrap' => "nowrap"
			);
		}

		if ($is_rate_production_available) {
			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[5]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			);

			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[6]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			);

			$table_data['job_total']['cells'][] = array(
				'value' => Format::currency_amount($project_currencies->convert($job_total[5] - $job_total[6]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				'class' => determine_class($job_total[5] - $job_total[6]),
				'nowrap' => "nowrap"
			);
		}
	}

	$table_data['purchase']['cells'][] = array(
		'value' => $GLOBALS['param']['purchases'],
	);

	$table_data['purchase']['cells'][] = array(
		'value' => ""
	);

	$table_data['purchase']['cells'][] = array(
		'value' => ""
	);

	$table_data['purchase']['cells'][] = array(
		'value' => ""
	);

	$table_data['expenses']['cells'][] = array(
		'value' => $GLOBALS['txt_expenses']
	);

	$table_data['expenses']['cells'][] = array(
		'value' => "",
	);

	$table_data['expenses']['cells'][] = array(
		'value' => "",
	);

	$table_data['expenses']['cells'][] = array(
		'value' => "",
	);

	$table_data['totalcost']['cells'][] = array(
		'value' => $GLOBALS['txt_totalcost']
	);

	if (!isset($project['hour_previ'])) {
	  $project['hour_previ'] = 0;
	}
	if (!isset($project['hour'])) {
	  $project['hour'] = 0;
	}
	$table_data['totalcost']['cells'][] = array(
		'value' => Format::span($project['hour_previ'], $GLOBALS['param']['time_unit'])
	);

	$table_data['totalcost']['cells'][] = array(
		'value' => Format::span($project['hour'], $GLOBALS['param']['time_unit'])
	);

	$table_data['totalcost']['cells'][] = array(
		'value' => Format::span($project['hour_previ'] - $project['hour'], $GLOBALS['param']['time_unit']),
		'class' => determine_class($project['hour_previ'] - $project['hour']),
		'nowrap' => "nowrap"
	);

	$table_data['margin']['cells'][] = array(
		'value' => $GLOBALS['txt_margin'],
		'class' => 'em',
	);

	$table_data['margin']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	$table_data['margin']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	$table_data['margin']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	$table_data['profitabilityrate']['cells'][] = array(
		'value' => $GLOBALS['txt_profitabilityrate'],
		'class' => 'em'
	);

	$table_data['profitabilityrate']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	$table_data['profitabilityrate']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	$table_data['profitabilityrate']['cells'][] = array(
		'value' => "",
		'class' => 'em'
	);

	if ($is_rate_direct_available) {
		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ'] - $project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['purchase_previ'] - $project['purchase_real']),
			'nowrap' => "nowrap"
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_previ'] - $project['expenses']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['expenses_previ'] - $project['expenses']),
			'nowrap' => "nowrap"
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_direct_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_direct']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_direct_previ'] - $project['cost_direct']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['cost_direct_previ'] - $project['cost_direct']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_direct_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_direct_previ']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_direct']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_direct']),
			'nowrap' => "nowrap",
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_direct'] - $project['marge_direct_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_direct'] - $project['marge_direct_previ']),
			'nowrap' => "nowrap",
		);


		$project['rentabilite_previ_direct'] = isset($project['rentabilite_previ_direct']) ? $project['rentabilite_previ_direct'] : 0;

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format($project['rentabilite_previ_direct'], 2, ".", " ")." %",
			'class' => determine_class($project['rentabilite_previ_direct']),
			'nowrap' => "nowrap",
		);

		if (!isset($project['rentabilite_direct'])) {
			$project['rentabilite_direct'] = 0;
		}
		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format($project['rentabilite_direct'], 2, ".", " ")." %",
			'class' => determine_class($project['rentabilite_direct']),
			'nowrap' => "nowrap"
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);
	}

	if ($is_rate_production_available) {
		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ'] - $project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['purchase_previ'] - $project['purchase_real']),
			'nowrap' => "nowrap"
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_previ'] - $project['expenses']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['expenses_previ'] - $project['expenses']),
			'nowrap' => "nowrap"
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_production_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_production']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_production_previ'] - $project['cost_production']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['cost_production_previ'] - $project['cost_production']),
			'nowrap' => "nowrap"
		);


		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_production_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_production_previ']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_production']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_production']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['marge_production'] - $project['marge_production_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['marge_production'] - $project['marge_production_previ']),
			'nowrap' => "nowrap"
		);

		$project['rentabilite_previ'] = isset($project['rentabilite_previ']) ? $project['rentabilite_previ'] : 0;
		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format($project['rentabilite_previ'], 2, ".", " ")." %",
			'class' => determine_class($project['rentabilite_previ']),
			'nowrap' => "nowrap"
		);

		if (!isset($project['rentabilite'])) {
			$project['rentabilite'] = 0;
		}
		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format($project['rentabilite'], 2, ".", " ")." %",
			'class' => determine_class($project['rentabilite']),
			'nowrap' => "nowrap"
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);
	}

	if ($GLOBALS['param']['ext_analytical'] and $GLOBALS['param']['analytical_projectdetails']) {
		$table_data['name']['cells'][] = array(
			'value' => $GLOBALS['txt_analytical'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_real'],
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		if (isset($project['list_tasks']) and is_array($project['list_tasks'])) {
			foreach ($project['list_tasks'] as $clef_task) {
				$table_data[$clef_task]['cells'][] = array(
					'value' => ""
				);
			}
		}
		$table_data['job_total']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert(isset($project['cost_salary']) ? $project['cost_salary'] : 0), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert(isset($project['purchase_real']) ? $project['purchase_real'] : 0), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert(isset($project['expenses']) ? $project['expenses'] : 0), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert(isset($project['cost_analytical']) ? $project['cost_analytical'] : 0), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$marge_analytical = null;
		if (isset($project['marge_analytical'])) {
			$marge_analytical = $project['marge_analytical'];
		}

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($marge_analytical), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($marge_analytical),
			'nowrap' => "nowrap"
		);

		$rentabilite_analytical = null;
		if (isset($project['rentabilite_analytical'])) {
			$rentabilite_analytical = $project['rentabilite_analytical'];
		}

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format($rentabilite_analytical, 2, ".", " ")." %",
			'class' => determine_class($rentabilite_analytical),
			'nowrap' => "nowrap"
		);
	}

	$project_object = new Project($project['project_id']);

	if ($GLOBALS['param']['cost_rateproject'] and $project_object->is_using_rateproject()) {
		$table_data['name']['cells'][] = array(
			'value' => Format::label($GLOBALS['param']['cost_project']),
			'colspan' => 3,
			'type' => 'th'
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_forecasted'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_real'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_difference'],
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['salefigure_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['salefigure']['cells'][] = array(
			'value' =>currency_format($project_currencies->convert($project['salefigure_real'] - $project['salefigure_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['salefigure_real'] - $project['salefigure_previ']),
			'nowrap' => "nowrap"
		);

		if (isset($project['list_tasks']) and is_array($project['list_tasks'])) {
			foreach ($project['list_tasks'] as $clef_task) {
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['task_rateproject_previ'][$clef_task]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['task_rateproject_real'][$clef_task]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
				);

				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::currency_amount($project_currencies->convert($project['task_rateproject_previ'][$clef_task] - $project['task_rateproject_real'][$clef_task]), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
					'class' => determine_class($project['task_rateproject_previ'][$clef_task] - $project['task_rateproject_real'][$clef_task]),
					'nowrap' => "nowrap"
				);

			}
		}

		$table_data['job_total']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['tasks_rateproject_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['tasks_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['tasks_rateproject_previ'] - $project['tasks_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['tasks_rateproject_previ'] - $project['tasks_rateproject_real']),
			'nowrap' => "nowrap"
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['purchase']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['purchase_previ'] - $project['purchase_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['purchase_previ'] - $project['purchase_real']),
			'nowrap' => "nowrap"
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_rateproject_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['expenses']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['expenses_rateproject_previ'] - $project['expenses_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['expenses_rateproject_previ'] - $project['expenses_rateproject_real']),
			'nowrap' => "nowrap",
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_rateproject_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['cost_rateproject_previ'] - $project['cost_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['cost_rateproject_previ'] - $project['cost_rateproject_real']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['margin_rateproject_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['margin_rateproject_previ']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['margin_rateproject_real']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['margin_rateproject_real']),
			'nowrap' => "nowrap"
		);

		$table_data['margin']['cells'][] = array(
			'value' => Format::currency_amount($project_currencies->convert($project['margin_rateproject_real'] - $project['margin_rateproject_previ']), $GLOBALS['param']['locale_lang'], false, $project_currencies->symbol()),
			'class' => determine_class($project['margin_rateproject_real'] - $project['margin_rateproject_previ']),
			'nowrap' => "nowrap"
		);

		if (!isset($project['profitability_rateproject_previ'])) {
			$project['profitability_rateproject_previ'] = 0;
		}
		if (!isset($project['profitability_rateproject_real'])) {
			$project['profitability_rateproject_real'] = 0;
		}

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format((float)$project['profitability_rateproject_previ'], 2, ".", " ")." %",
			'class' => determine_class($project['profitability_rateproject_previ']),
			'nowrap' => "nowrap"
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => number_format((float)$project['profitability_rateproject_real'], 2, ".", " ")." %",
			'class' => determine_class($project['profitability_rateproject_real']),
			'nowrap' => "nowrap"
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);
	}

	if ($GLOBALS['param']['ext_chargeplan']) {
		$workloads = new Workloads();
		if ($with_children == true) {
			$children = new Projects_Collector();
			$children->parent = $project['project_id'];
			$children->select();
			$project_ids = array_merge(array($project['project_id']), $children->ids());
		} else {
			$project_ids = $project['project_id'];
		}
		$workloads->select(array('project_id' => $project_ids));
		$chargeplan_tasks = $workloads->spans_per_tasks_id();

		$table_data['name']['cells'][] = array(
			'value' => Format::label($GLOBALS['txt_chargeplan']),
			'colspan' => 3,
			'type' => 'th'
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_forecasted'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_real'],
		);

		$table_data['subname']['cells'][] = array(
			'value' => $GLOBALS['txt_difference'],
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => ""
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => ""
		);

		$table_data['salefigure']['cells'][] = array(
			'value' => ""
		);

		if (isset($project['list_tasks']) and is_array($project['list_tasks'])) {
			foreach ($project['list_tasks'] as $clef_task) {
				if (is_numeric($clef_task)) {
					$span = isset($chargeplan_tasks[$clef_task]) ? $chargeplan_tasks[$clef_task] : 0;
				} else {
					$clef_task = 0;
					$span = isset($chargeplan_tasks[0]) ? $chargeplan_tasks[0] : 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::span($span, $GLOBALS['param']['time_unit'])
				);

				if (!isset($project['sum_task'][$clef_task][0])) {
					$project['sum_task'][$clef_task][0] = 0;
				}
				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::span($project['sum_task'][$clef_task][0], $GLOBALS['param']['time_unit'])
				);

				$table_data[$clef_task]['cells'][] = array(
					'value' => Format::span(!isset($chargeplan_tasks[$clef_task]) ? 0 : $chargeplan_tasks[$clef_task] - $project['sum_task'][$clef_task][0], $GLOBALS['param']['time_unit']),
					'class' => determine_class(!isset($chargeplan_tasks[$clef_task]) ? 0 : $chargeplan_tasks[$clef_task] - $project['sum_task'][$clef_task][0]),
					'nowrap' => "nowrap"
				);
			}
		}

		$chargeplan_total = $workloads->span();

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($chargeplan_total, $GLOBALS['param']['time_unit'])
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($job_total[2], $GLOBALS['param']['time_unit'])
		);

		$table_data['job_total']['cells'][] = array(
			'value' => Format::span($chargeplan_total - $job_total[2], $GLOBALS['param']['time_unit']),
			'class' => determine_class($chargeplan_total - $job_total[2]),
			'nowrap' => "nowrap"
		);


		$table_data['purchase']['cells'][] = array(
			'value' => ""
		);

		$table_data['purchase']['cells'][] = array(
			'value' => ""
		);

		$table_data['purchase']['cells'][] = array(
			'value' => ""
		);

		$table_data['expenses']['cells'][] = array(
			'value' => ""
		);

		$table_data['expenses']['cells'][] = array(
			'value' => ""
		);

		$table_data['expenses']['cells'][] = array(
			'value' => ""
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::span($chargeplan_total, $GLOBALS['param']['time_unit'])
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::span($job_total[2], $GLOBALS['param']['time_unit'])
		);

		$table_data['totalcost']['cells'][] = array(
			'value' => Format::span($chargeplan_total - $job_total[2], $GLOBALS['param']['time_unit']),
			'class' => determine_class($chargeplan_total - $job_total[2]),
			'nowrap' => "nowrap"
		);


		$table_data['margin']['class'] = 'em';

		$table_data['margin']['cells'][] = array(
			'value' => ""
		);

		$table_data['margin']['cells'][] = array(
			'value' => ""
		);

		$table_data['margin']['cells'][] = array(
			'value' => ""
		);

		$table_data['profitabilityrate']['class'] = 'em';

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);

		$table_data['profitabilityrate']['cells'][] = array(
			'value' => ""
		);
	}

	$table_data = merge_plugins_projectdetails_profitability($table_data, $project['project_id']);

	return $table_data;
}

function confirm_customer($customer, $project) {
	$dbLoad = new db();

	if ($project and !($customer)) {
		$customer = (int)$dbLoad->getValue("SELECT customer_id FROM ".$dbLoad->config['table_project']." WHERE id = '".$project."'");
	}
	return $customer;
}

function confirm_project($customer, $project) {
	$dbLoad = new db();

	if ($customer != (int)$dbLoad->getValue("SELECT customer_id FROM ".$dbLoad->config['table_project']." WHERE id = '".$project."'")) {
		$project = 0;
	}
	return $project;
}

function get_project_validation_date($project_id) {
	$dbLoad = new db();

	$query_validation = "SELECT validation as validation FROM ".$dbLoad->config['table_project']." WHERE id = '".$project_id."'";
	$validation_date = $dbLoad->getValue($query_validation);

	return $validation_date;
}

function get_project_daughters($project_id) {
	$project = new Project($project_id);
    $project_daughters[] = $project_id;

    $children = $project->children();
    foreach ($children as $child) {
	    $project_daughters[] = $child;
    }

	return $project_daughters;
}
